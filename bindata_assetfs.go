// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/logo.svg
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x58\x6d\x93\xdb\xb8\x0d\xfe\x2c\xff\x0a\x54\x9d\x1b\xdb\x53\x59\xb2\xb5\xbb\xd9\xac\x22\xb9\x4d\xd3\xb4\x49\x26\x6f\x93\xec\xdd\xf5\xa6\xd3\x0f\xb4\x04\x4b\xcc\x52\xa4\x4a\x52\x7e\xe9\x8e\xff\x7b\x87\xa4\xe4\xd7\xbd\x34\x93\xcc\x5a\x02\x88\x87\x00\xf8\x00\xa0\x9d\xfe\xe1\x6f\x9f\x5e\xdd\xff\xf6\xf9\x35\x54\xba\x66\xf3\x41\xda\x7f\x20\x29\xe6\x03\x2f\xd5\x54\x33\x9c\x3f\x3e\x42\xf8\x0f\x29\xda\xe6\x23\xa9\x11\x76\xbb\x34\x72\xf2\x81\x97\x32\xca\x1f\xa0\x92\xb8\xcc\x86\x95\xd6\x8d\x4a\xa2\x68\x29\xb8\x56\x61\x29\x44\xc9\x90\x34\x54\x85\xb9\xa8\xa3\x5c\xa9\x3f\x2f\x49\x4d\xd9\x36\xfb\x22\x16\x42\x8b\x3f\x7d\x65\x64\x91\x5c\x4f\xa7\xc1\xd5\x74\x3a\x04\x89\x2c\x1b\x2a\xbd\x65\xa8\x2a\x44\x3d\x04\xbd\x6d\x30\x1b\x6a\xdc\x68\x63\x3b\x34\x7b\xd5\xa8\x09\x70\x52\x63\xe6\xaf\x28\xae\x1b\x21\xb5\x0f\xb9\xe0\x1a\xb9\xce\xfc\x35\x2d\x74\x95\x15\xb8\xa2\x39\x4e\xec\x4b\x00\x94\x53\x4d\x09\x9b\xa8\x9c\x30\xcc\x66\xbe\x41\xb1\x9b\x38\x78\xbf\x87\x37\x0a\xcf\x84\x1e\xc0\x42\x14\x5b\x78\x1c\x78\x9e\x57\x93\x8d\xc3\x49\xe0\xf9\xf5\xb4\xd9\xbc\x70\x42\x59\x52\x9e\xc0\x14\x48\xab\x85\x15\x35\xa4\x28\x28\x2f\x13\x98\x4d\x9b\x0d\xc4\xfd\x1f\xab\x33\xb9\x98\xb8\xb8\x13\x18\xba\xc8\xc1\x44\x3e\x0c\xe0\xa5\xa4\x84\x05\xa0\x50\xd2\xe5\x0b\xd8\xaf\x5e\x23\x2d\x2b\x9d\xc0\xd5\x74\x7a\x80\x50\xf4\xbf\x98\xc0\xd5\xb3\x0e\x76\x41\xf2\x87\x52\x8a\x96\x17\x93\x5c\x30\x21\x13\x58\x57\x54\xa3\xd5\x75\x02\x59\x2e\x46\xf1\x34\xb0\xff\xc7\x46\xb1\x1b\x78\xde\x1f\x99\x28\x85\x8b\xae\x8b\xec\x7a\x7a\x88\x6c\x1f\xee\xdd\xf5\x4f\x27\xc1\x86\x37\x58\xc3\xb4\x07\xa9\x66\x01\x54\xb1\xe7\x60\x4e\x5c\xbe\xbe\x74\x79\x86\xf5\x85\x48\x3a\x99\xc5\x8a\x9f\x80\xe9\x22\x37\x7a\xca\x9b\x56\x07\xb0\x68\xb5\x16\xfc\x68\xa9\x43\x0a\x9f\x5f\xa2\x87\xcf\xe5\xb1\xf0\x47\x73\xbf\xdf\xec\x24\x3b\x77\xb7\xe1\xed\xcd\x4f\xa7\xa7\x1c\x87\xf1\xcd\x4f\x30\x0b\x67\xb1\xd3\xec\x2d\xff\x65\x39\x95\x57\x98\x3f\x2c\xc4\xe6\xdf\x27\x40\x07\xb2\x08\x45\x35\x15\x3c\x01\xb2\x50\x82\xb5\xdd\xa1\x69\xd1\x24\x10\xc6\x37\x9d\xeb\x0c\x97\x3a\x71\x19\x3f\x62\x9c\xfd\xd7\x6f\xc9\xc8\x02\xd9\x65\x46\x7a\x84\x82\xaa\x86\x91\x6d\x02\x0b\x26\xf2\x87\x13\xa0\x59\x7f\x98\x87\x98\x1c\x76\x7c\xd3\x51\xe1\xe0\xa4\x44\x46\x34\x5d\x61\xbf\xeb\xf1\x41\x2c\x84\x2c\x50\x4e\x24\x29\x68\xab\x12\x98\xed\xf7\xee\x14\xb6\xd0\x12\xe0\x82\x9f\x10\xf3\xc0\xd4\x4b\x16\x1b\xd2\x3e\x9b\x06\x30\xbb\x9d\x05\x70\x77\x37\x3e\xf2\x7b\xe2\x52\xd4\xef\xb1\x77\xdd\x72\xd3\xb2\xcc\xe6\x51\x12\xde\xfb\x6e\x53\x0f\xe1\xed\x8d\x0a\xa0\xb2\xd4\xea\x5e\xce\xf7\xb5\xe2\xd3\x08\x93\x4a\xac\x50\xba\x38\xf3\x56\x2a\xe3\x5c\x23\x28\xd7\x28\xcf\x16\x16\x54\x91\x05\xc3\xa2\xcb\xc9\x53\x21\x91\xd1\xcd\x55\x70\x7b\x1d\xdc\x5d\x05\xe1\x8d\x8b\xa9\xc7\x5c\x13\xaa\x1d\xe0\xc0\xf3\x42\xd5\xe6\x39\x2a\x15\x40\xb8\x24\x94\xb5\x12\xbf\x0b\x7a\x94\xa8\x00\xc2\x78\x7c\x94\xfb\x04\x66\xcd\x06\x94\x60\xb4\x78\x3a\xa7\xdf\xcb\xf7\x11\x2b\x66\x7d\xa5\x1a\xef\xfe\xbf\x4f\xa3\xf8\x7a\x16\x40\x1c\xc7\xf6\xcf\xb1\x43\xc7\x8b\x66\x77\x37\x01\xc4\x77\x01\xdc\x4e\x2f\x9c\x39\xd7\xb9\x9d\x71\x85\x5c\xab\xbe\x2b\x1f\xd8\x10\x1f\x1a\x49\xbf\x86\x51\xb7\x8c\x51\xa5\xcf\x19\x78\x02\xd6\x5c\xd4\x4e\x1c\x3b\xfa\x9f\x2d\x53\x5a\x0a\x5e\x5e\xae\xbe\x3e\x6e\xf1\x67\x1d\xd0\x42\xfc\xa5\xc6\x82\x12\x18\x1d\x1a\xeb\x33\xd3\x6c\xc7\x0e\xea\x7c\xda\x9c\x60\x3f\xef\xb0\x77\xbf\x8f\x75\xfd\xa3\x58\xd3\x33\xac\x34\xb2\x69\x99\x0f\xd2\xc8\x4d\xf9\xd4\x18\x9a\xc9\x68\x5e\x51\x9a\x51\x98\xd2\xba\x04\x5a\x64\xbe\x99\x17\x3e\x28\x99\xbb\xc7\x50\xad\x4a\x3b\x44\xa3\x7e\xad\x19\xcb\x84\x72\x63\x64\xec\xaa\xd9\xc5\x65\x01\xa8\x02\x02\x4a\xe4\x94\x30\x30\x94\x69\xa0\xc0\x82\xe6\x44\x63\x01\x5a\x18\xd1\x9a\xf2\x12\x74\x85\xc0\x44\x4e\x18\x14\xb8\x42\x26\x1a\x94\x90\x8b\xba\x6e\x39\xd5\xdb\x30\x8d\xaa\x99\xd9\xcd\x4b\x9b\xf9\xaf\x08\x44\xa2\x55\x52\xdd\xa1\x34\x52\xac\xa8\xa1\x2d\x10\x58\x4a\x8a\xbc\x60\xdb\x00\x14\x59\x22\x10\x5e\xc0\x1a\x59\x2e\x6a\xa3\x46\xbe\xa2\x52\xf0\x1a\xb9\x86\xa5\x90\x80\x9b\x06\xcd\xfa\x1c\x0b\xbb\x92\xa8\x86\x4a\xeb\x0f\xe6\x15\x17\x4c\x94\x54\x69\x15\x80\xc4\x92\xc8\x82\xa1\x52\x20\x96\x50\x22\x2f\x50\x06\xdd\x27\xd0\x02\xb9\xa6\x7a\x6b\x11\x70\xd3\x48\x54\x8a\x0a\x6e\x06\xcc\xa6\x25\x0c\x84\xd9\x41\x13\x6d\x65\xb6\x63\x50\x46\xf5\x36\x80\xa6\xda\x2a\x6a\x62\x26\x4d\x83\x44\x12\x9e\x63\x77\x90\xe6\xf4\x02\x90\xc4\x08\x48\x89\x20\xa4\x69\xc6\xb4\xa4\x82\x87\x69\xd4\xb8\x5c\x14\x74\x65\x8f\x49\x69\xa2\x5b\x35\xa9\x51\x29\x52\xa2\x3f\x4f\xa3\x82\xae\xce\x96\x30\x92\x3f\x4c\x96\x42\xd6\xf6\xb2\xe3\xa5\x55\x3c\x7f\x27\x28\x87\x56\x81\xe0\x66\x2e\xe6\x0f\x49\x1a\x55\xb1\xd3\xba\x59\x78\xb8\x25\xf9\xd0\x30\x92\x63\x25\x58\x81\x32\xf3\xb1\x26\x94\x01\x29\x0a\x13\xa9\x6f\x37\xb0\xa2\xc9\x5e\x64\x26\xde\x52\xe4\xad\xb2\x78\x16\xd3\x8d\xac\xa5\x90\x99\x6f\xd6\x52\x5e\x4e\x6c\x99\x8a\x46\x4f\x28\x77\x6e\x9d\xee\xdc\x0f\x53\xb7\xc3\x53\x46\xdd\x7d\xf0\x49\x95\xb5\xc6\xc2\xe1\xbe\x64\x4a\x18\x87\xa1\x46\xc3\x17\xc3\xb6\x0b\xa6\x76\x28\x60\x50\x42\x18\xfd\x22\x58\x5b\x23\xac\x29\x63\xb0\x30\xe4\x5c\x87\xf0\x2b\x42\x45\x34\x82\x6a\x1b\x94\x4b\xd6\x8a\x56\x81\x4b\xc6\xb7\x56\x69\x20\x0a\xea\x36\xaf\xcc\xe7\x56\xb4\x50\x88\x70\x6c\x43\x8f\x6c\xec\xf6\x44\xbc\xb4\x1b\xa2\x82\xe7\x8c\xe6\x0f\x99\x2f\xf1\x3f\x2d\x2a\xfd\x96\xaf\xa8\xc6\xd1\xf8\x85\x8b\x96\xda\xd7\x89\x5b\xec\xcf\xbf\x22\xb7\xbe\x13\x0e\x4e\x93\x46\x4e\x65\xeb\x75\x7f\xde\x8f\x8f\x6b\x6a\xa6\xde\x6b\xdb\xbe\x76\xa6\xe8\x53\x85\xb9\x61\x1e\xe4\x8c\x28\x95\xf9\xae\xb3\x1d\x58\xf0\x73\xd3\x95\x86\xb3\x39\x22\x41\xcb\x5c\xee\x1e\x1f\x25\xe1\x25\x42\x68\xf1\xcc\x49\x52\xa7\x30\xd5\xe8\x1e\xcc\xbd\xda\xf4\x49\x5b\xfe\xf7\xb4\xc6\xf0\xef\x42\xd6\x44\x03\xf8\xef\x08\x87\x69\x1c\xc0\x55\x32\xbd\x86\xcf\x1f\x7c\xd8\xed\x12\x9b\xfb\xfd\xb7\x89\xce\xb4\x43\xea\x43\xf8\x05\x79\x8b\xbb\x5d\xba\x90\xbd\xc6\x3b\xb6\x3a\x13\xbf\x74\xc4\x7b\x4f\x39\xce\xa0\xf3\xd3\x68\x90\x17\xfd\x9b\x2d\x1b\xf7\xd0\x07\x70\xa4\x4f\x23\x17\x6e\x1a\x75\xf9\x9a\x0f\x8e\xf4\x69\xe4\xda\x9c\xf9\x02\x91\x4b\xda\x1c\xd7\x46\xf4\x8d\xac\x88\x93\xda\xac\x2e\x5b\xee\x12\x7e\x76\xb0\xae\x39\xaf\x88\xec\xef\xb3\x19\x14\x22\x6f\x4d\x2b\x0a\x4b\xd4\xaf\x19\x9a\xc7\xbf\x6e\xdf\x16\xa3\xb3\xd3\x1f\x07\xc6\x12\x00\x4c\x27\x29\x29\x27\xec\xbd\xad\xa5\xac\x43\x0a\x29\xe7\x28\xdf\xdc\x7f\x78\xef\xae\x41\x9d\x74\x7f\x37\xc9\x40\xcb\xb6\xbb\x74\x9d\x19\x40\x06\xfe\x17\xe7\xa7\xed\x9e\x3d\xbd\xc2\x30\xf4\x1d\x98\x71\x78\x53\x49\xc8\x80\xe3\x1a\xfe\xf9\xe1\xfd\x1b\xad\x9b\xce\x64\xe4\x26\xf8\xa6\x92\xa1\x68\x90\x8f\x86\x9f\x3f\x7d\xbd\x1f\x06\x80\x3c\x17\x05\xfe\xfc\xe5\xed\x68\xd8\x25\x61\xe2\x60\x87\xe3\x83\x85\x42\xdd\xc1\xbc\xb1\xd3\x64\x34\x7c\xe5\xbe\xcc\x4d\xee\xb7\x0d\x0e\x03\x18\x92\xa6\x61\x66\x52\x50\xc1\xa3\x6f\x4a\xf0\xe1\xb1\x31\x2f\x46\xef\xbe\x7e\xfa\x18\x2a\x6d\xfa\x35\x5d\x6e\x47\x6e\xf8\xd9\x72\x4c\x7e\x3f\xb5\xa7\x8d\x6a\x1c\xae\x08\x6b\xd1\x26\xd8\xeb\x7c\x75\xcd\xd0\xe6\xec\x44\xfe\xc1\xf5\x87\xf7\x54\xe9\xef\xe0\x3f\xd5\x8b\xc6\x61\xd7\x8c\xec\x24\x36\x39\x18\xec\xf3\xc6\x99\x20\xe6\x88\x7a\xda\xf4\x44\xb1\x89\x77\x9d\xfd\x83\x6b\xec\xdf\x23\xcc\xd9\x08\x70\x8c\xf1\x3c\xdb\xf6\x4d\x29\x7e\xd7\xf6\x30\x1b\xc6\xee\xcc\x3d\xba\x84\x91\x4d\xb3\x85\x85\x2c\xcb\x20\x9e\x4e\x7b\xcf\xbc\x13\xb7\x42\xdb\x58\x6c\x5d\x66\xe0\x77\x97\x58\xff\xa9\x85\x27\xac\x4b\x9b\xf9\x6f\xa2\x95\x8e\x6f\xf6\x8c\xa1\x22\x0a\x16\x88\x1c\x94\x71\x13\x3e\x33\x24\x0a\x5d\x1f\x37\xfd\x54\xba\x56\x6b\xe7\x5f\x47\xce\xa3\x08\xc3\x86\x48\xe4\xfa\xa3\x28\x30\x94\x58\x8b\x15\xbe\xaa\x28\x2b\x46\xfb\x05\x7d\x6c\xae\x1d\x20\x53\xf8\x03\xe1\x74\xb7\xde\x1f\x0a\xe7\xbe\x42\x89\xb0\x26\xca\x94\x11\x4a\x29\xa4\xb9\x97\x98\x6c\x98\xd2\xda\x9e\x06\xbb\x0f\x4f\xcb\x2d\x90\x92\x50\x0e\x8c\x68\x94\xa7\xd1\x5d\x56\xf2\x92\x30\xe5\x4a\xf9\xc9\x62\x3e\x69\x10\x2f\x0e\xf1\xee\x4e\x2b\xa7\xff\x49\x20\x8d\x5c\xe3\x9a\x0f\xbc\x41\x1a\xb9\x9b\x60\x1a\xd9\x5f\x81\xfe\x17\x00\x00\xff\xff\x31\x5d\xc7\x72\x1c\x12\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4636, mode: os.FileMode(420), modTime: time.Unix(1475912422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsLogoSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x4d\x8f\x1b\x37\x0c\xfd\x2b\x83\xe9\xa5\x05\xa8\x67\x51\x14\xf5\x11\xac\x17\xd8\x9e\x72\xd8\x1c\x0a\x14\x73\xc8\x6d\x82\x7a\x37\x0b\x4c\xe2\xcc\x7a\x60\xa7\xff\xbe\xa0\x14\xbb\x6d\x8e\x41\x2e\x0f\xb4\x9e\x48\x3e\xf1\xd1\x73\x77\x3a\x3f\x0f\x5f\x3f\x2d\x9f\x4f\xfb\xf1\xe3\xb6\x7d\x79\xb3\xdb\x5d\x2e\x17\x5c\x04\xc7\xd7\xe7\x5d\xf0\xde\xef\x4e\xe7\xe7\x71\x38\xbf\x1c\x2e\xbf\x1f\xbf\xee\x47\x3f\xf8\x81\x73\x41\x2e\x43\xf2\x28\x32\xde\xdf\x6d\x2f\xdb\x72\xb8\x5f\x8e\xcf\xc7\xbb\x5d\x8f\xef\xbe\xcc\xdb\xc7\xe1\xaf\xfd\xf8\x2e\x16\xe2\x0c\xcd\x8b\x13\x46\xa9\xc4\xf1\x31\x16\x8a\x0a\x4d\x93\x66\x94\xf8\xa8\x48\x4c\x92\x21\x65\x0a\x8a\xac\xc6\x2b\x82\x4e\x2d\xef\xfd\x38\x6c\xaf\xf3\xe7\xd3\xd3\xf1\xf5\xd3\x7e\x6c\xe1\x32\x6f\x87\x5f\x9d\xa5\x0d\x8e\xe1\xe5\xb7\x71\x38\x6d\x7f\x2f\x87\xfd\xf8\xf4\xb2\x2c\x6f\x7e\x91\x18\xab\x1e\xc6\xdd\x7f\x54\x70\x0c\x5d\xc6\x64\x95\x97\x18\x10\x29\x78\xe8\xd4\xfa\x3e\x1a\xdd\xc4\x4c\x4d\xd8\xd2\xa4\x3a\x16\x54\xfd\x39\xfd\x53\x41\x55\x0a\x82\x92\x66\x56\xc4\x44\x1d\x3d\x79\x62\x8a\x28\xc1\x29\x44\x1f\x98\xc1\x4c\x1d\x3b\x57\x3c\x71\x42\x0e\x6b\x46\x8a\x76\xc2\xc8\x89\x14\x45\xb6\x08\x96\x46\xca\xea\x89\x3d\xb2\xba\x08\x9f\xed\x28\xa5\x99\x05\xbe\x52\xc7\x56\xca\x31\x23\x46\x52\x54\x7e\xe0\xd0\x2e\x36\xec\x7d\xb2\x40\x2b\x25\x6f\x79\x41\xa9\x63\xcf\x8b\x48\xd1\x9e\x7b\x4e\x90\xfc\x56\x33\x72\x9c\xf8\x6d\x7b\xd2\xd4\x9e\xf4\xfe\x5d\x89\x48\x24\x15\x92\x57\xef\x12\x42\x70\x56\xda\x55\x64\x9d\x2d\x8b\x1a\x58\x39\xef\x14\x39\x38\x81\x0a\x25\x44\xed\x70\x63\x12\x19\xb3\xba\x60\x13\xb0\xb0\x47\x56\x68\xbb\x45\xf3\x77\x89\x74\x4b\xa4\xef\x9a\xd1\xad\xd9\x1f\x4d\xa2\xd9\x5b\xe8\x5f\xb5\x3f\xe0\x6e\xd0\xf9\xa0\x4f\xff\xdf\x2e\x09\x08\x89\xb4\x40\x75\x0e\x62\xfb\xdc\xb1\xcf\x2f\x81\x29\x20\x16\x0a\x05\xa9\x43\x27\x32\xa1\x84\xd5\x55\xd4\x48\xde\xb1\x42\xa3\x4b\x7f\xd6\x62\xda\x42\x5d\xbd\x63\x8f\x24\xa4\x36\x7f\x33\x35\x6e\x76\xa7\xb8\x34\x87\x0c\xae\xd4\xb1\xfb\x67\x9e\xa3\xb0\x95\x8f\xf9\x1b\x5e\x19\xa9\xd6\xbf\x4e\xe2\x11\xe4\x81\x0b\xa4\x50\xc7\x3e\x24\x0e\x09\x25\x53\xc8\xb3\x6d\x53\x5b\xa0\x7c\x75\x2b\xc1\x17\xc7\x60\x59\x9d\x22\x56\xf2\xae\xd8\x16\x09\x62\xdd\x9c\x90\x69\x5f\x7d\xf7\xa2\xfd\xda\xae\xb4\x5a\xb1\x12\xa8\x63\x6f\x94\xc0\x36\xd3\x6a\xff\xc5\xa2\xdf\xf0\x6a\x94\x64\x27\x90\x30\xb5\x31\xfe\x88\x31\xb5\xf0\x87\x0f\x66\x8c\x7d\xb1\xee\xff\x09\x00\x00\xff\xff\x9f\x88\xa3\xd7\xd9\x04\x00\x00")

func assetsLogoSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsLogoSvg,
		"assets/logo.svg",
	)
}

func assetsLogoSvg() (*asset, error) {
	bytes, err := assetsLogoSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/logo.svg", size: 1241, mode: os.FileMode(420), modTime: time.Unix(1475565777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/logo.svg": assetsLogoSvg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"logo.svg": &bintree{assetsLogoSvg, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
