// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/logo.svg
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x57\x6d\x73\xdb\xb8\x11\xfe\xac\xfc\x8a\xad\x3a\x19\x49\x53\x89\x92\x18\x3b\x89\x65\xd1\xed\x5d\x9a\x4e\x72\x93\xb7\x49\xdc\x69\x6f\x3a\xfd\x00\x91\x90\x88\x18\x24\x58\x00\x94\xac\x76\xf2\xdf\xfb\x00\x20\x25\x51\xf6\xe5\x72\x97\x38\x16\x16\xfb\xf6\xec\xb3\xbb\xd0\xf2\x0f\x7f\xfd\xf8\xea\xf6\xd7\x4f\xaf\x29\xb7\x85\xbc\x79\xb2\x6c\xff\xe1\x2c\xbb\x79\xd2\x5b\x5a\x61\x25\xbf\x79\xc3\xd2\x3b\xfa\x99\x4b\x29\xca\x4d\xce\x8a\xe5\x34\x1c\x43\x8e\x93\x3b\xca\x35\x5f\x27\x83\xdc\xda\xca\x2c\xa6\xd3\xb5\x2a\xad\x89\x36\x4a\x6d\x24\x67\x95\x30\x51\xaa\x8a\x69\x6a\xcc\x9f\xd7\xac\x10\x72\x9f\x7c\x56\x2b\x65\xd5\x9f\xbe\x48\xb6\x5a\x5c\xcc\x66\xe3\x67\xb3\xd9\x80\x34\x97\xc9\xc0\xd8\xbd\xe4\x26\xe7\xdc\x0e\xc8\xee\x2b\x9e\x0c\x2c\xbf\xb7\x4e\x77\xe0\x7c\x15\xdc\x32\x2a\x59\xc1\x93\xfe\x56\xf0\x5d\xa5\xb4\xed\x53\x0a\x6f\xbc\xb4\x49\x7f\x27\x32\x9b\x27\x19\xdf\x8a\x94\x4f\xfc\x87\x31\x89\x52\x58\xc1\xe4\xc4\xa4\x4c\xf2\x64\xde\x77\x56\xbc\x93\x60\xbe\xdf\x9a\x77\x82\x9e\xcb\x7c\x4c\x2b\x95\xed\xe9\x7f\xf8\xd8\x2b\xd8\x7d\xb0\xb3\xa0\x97\x17\xb3\xea\xfe\x3a\x1c\xea\x8d\x28\x17\x34\x23\x56\x5b\xe5\x8f\x2a\x96\x65\xc0\x65\x41\x73\x5c\xa2\xb8\xfd\xe1\x65\x0e\x8b\x49\xc8\x7b\x41\x83\x90\x39\xb9\xcc\x07\x63\xfa\x49\x23\xb4\x31\x19\xae\xc5\xfa\x9a\x0e\xb7\x77\x5c\x6c\x72\xbb\x20\xc0\x72\x34\x61\xc4\x7f\x39\x8e\x9e\x37\x66\x57\xa8\xc7\x46\xab\xba\xcc\x26\xa9\x92\x4a\x2f\x68\x97\x0b\xcb\xbd\xac\x39\xd0\x9b\xd5\x30\x9e\x8d\xfd\x9f\x91\x13\x7c\xc3\xdf\x3f\x4a\xb5\x51\x21\xbb\x26\x33\x14\xe0\x90\xd9\x21\xdd\xab\x8b\xa7\x9d\x64\xa3\x4b\x5e\xd0\xac\x35\x92\xcf\xc7\x94\xc7\xbd\x60\xa6\x13\xf2\xc5\xc3\x90\xe7\xbc\x78\x70\xa4\xc3\x99\xb7\x15\x3f\x62\xa6\xc9\xdc\xc9\x45\x59\xd5\x16\x45\xa9\xad\x55\xe5\xc9\xd5\x60\x29\x7a\xf9\xd0\x7a\xf4\x52\x9f\x1e\xfe\x28\xf6\x07\x67\x1d\x74\xae\x5e\x44\x2f\x2e\x9f\x76\xab\x1c\x47\xf1\xe5\x53\x9a\x47\xf3\x38\x48\x0e\x9a\xff\xf2\x9c\x4a\x73\x9e\xde\xad\xd4\xfd\xbf\x3b\x86\x8e\x64\x51\x06\x94\x54\x00\x95\xad\x8c\x92\x75\x53\x34\xab\x2a\x84\x1e\x5f\x36\xa1\x4b\xbe\x06\x0e\xb3\x33\xc6\xf9\xff\x5b\x97\xc8\x83\xcb\x87\x88\xb4\x16\x32\x61\x2a\xc9\x90\xf8\x4a\xaa\xf4\xae\x63\x68\xde\x16\xf3\x98\x53\xb0\x1d\x5f\x36\x54\x38\x06\x89\xb6\x64\x56\x6c\x79\xeb\xf5\xb4\x10\x2b\xa5\x33\xae\x27\x9a\x65\xa2\x36\x30\x7b\xf0\xdd\x08\x7c\xa3\x2d\xa8\x54\x65\x87\x98\x47\xa6\x3e\x64\xb1\x23\xed\xf3\xd9\x98\xe6\x2f\xc0\xb1\xab\xab\xd1\x49\xdc\x93\x00\x51\xeb\xe3\x10\xba\xe7\xa6\x67\x99\xc7\x51\xb3\xb2\x8d\xdd\x43\x4f\x28\xa0\x01\x5f\x3d\xb5\x9a\x0f\xe7\x7e\xfd\x71\x37\xc3\x45\xae\xb6\x5c\x87\x3c\xd3\x5a\x1b\x17\x5c\xa5\x04\x46\x8d\x3e\xbb\x08\xa0\xd9\x4a\xf2\xac\xc1\xe4\xb1\x94\xd8\xf0\xf2\xd9\xf8\xc5\xc5\xf8\xea\xd9\x38\xba\x0c\x39\xb5\x36\x77\x4c\xd8\x60\x10\x3f\x22\x53\xa7\x29\x37\x88\x30\x5a\x33\x21\x6b\xcd\xbf\x6b\xf4\x04\x28\x68\xc4\xa3\x13\xec\x51\x0d\x4c\x21\xf0\x4b\x64\x8f\x63\xfa\x3d\xbc\x4f\x58\x31\x6f\x3b\xd5\x45\xf7\xfb\x31\x0d\xe3\x0b\xd8\x89\xe3\xd8\xff\x38\x0d\xe8\xf4\xd2\xfc\xea\x12\x72\xc4\xfc\x62\xf6\x20\x98\x73\x99\xf7\xfc\x97\x82\x67\x82\xd1\xf0\x38\xa1\x9e\xbb\xa9\x35\x0a\x91\x9c\x8f\xed\xd3\x76\x88\x5f\x36\x8c\xfe\xf6\xdb\xb6\x2e\x7e\xd4\xd6\xec\xcc\xd6\x72\xea\x19\x8e\x65\x39\x0d\xdb\x72\xe9\x14\xdd\x8a\x71\x1f\xb9\x76\x3b\x65\x29\x8a\x0d\x89\x2c\xe9\xbb\xc1\xdb\x27\xa3\xd3\xf0\x6b\x64\xb6\x1b\xbf\x8d\xa6\xed\x5d\xb7\xdf\x98\x28\x9d\x92\xd3\xcb\xe7\xe7\x4b\x97\x84\x21\x86\x9a\xa6\x98\x5c\xe4\xa0\xaf\x28\x43\x2e\x29\xb3\x20\x1f\x26\x1b\x8e\x76\xb8\x49\x36\xe7\x84\x9e\xc7\x25\xec\x42\x2e\x55\x05\x1e\x63\x03\x17\x35\x76\xe1\x3e\x82\xc3\xb9\x73\xd6\x5b\x56\x37\xff\xe0\xc4\x50\x4f\x27\x14\xb6\xb1\x52\x69\xb5\x15\xae\xfc\xf0\xb5\xd6\x82\x97\x99\xdc\x63\x4e\xb2\x35\xee\x96\x19\xed\xb8\xc4\x75\x27\xe6\xe5\x56\x68\x55\x16\xd8\xbd\xb4\x46\x0f\xf1\x7b\x38\xc2\xfd\x14\x76\xdc\x4d\x66\x2a\xa1\x7d\x3c\x3c\xcd\x4b\x54\x78\x23\x8c\x05\xb5\x35\xdf\x30\x9d\x61\xcd\x1b\x52\x6b\x62\x1b\x3e\x26\xdf\x42\x42\x22\xbc\x31\x6d\xe0\x91\xeb\x31\xd6\xbc\x6b\x62\x16\x0e\x35\x4b\xb9\xd3\x94\x62\x83\x43\x37\xb6\xef\xeb\x46\x04\xcf\x46\x60\xc4\x33\x4d\xf0\x6f\x9c\x0a\xa5\x39\x83\x06\x5a\x15\x1e\x45\x8a\x94\xab\x90\x71\x26\xb6\xbe\x16\xc6\x32\x5b\x9b\x49\x81\x18\xe0\xbf\x7f\xb3\x9c\x42\x72\x76\x45\x02\xfc\x09\xf2\x2a\xfc\xd3\x00\xf5\x88\x6f\x7e\x41\xff\x53\x8d\xb0\x4b\xb7\x45\xd2\xbb\x05\xb0\x8c\x83\x34\x6c\x8e\xe3\x9b\xa2\x4f\x18\xbe\x29\xcf\x95\x44\x32\x49\x9f\xa3\xb2\x92\xd0\x56\x1a\x2e\xfb\xde\x81\x3f\x9a\x1c\x8e\xdc\x7e\x58\xab\xb4\x36\xde\x9e\xb7\x19\x06\x3c\x42\x48\xfa\xee\x2e\xa0\x9c\x48\x24\x34\x51\x95\x9d\x88\x32\x84\xd5\xf5\xdc\xae\x9e\xe0\xe1\x31\xa5\xe6\xf5\xf4\xa8\xc8\x6b\xf3\x2c\xd8\xfd\x49\x1a\xe5\x02\xa6\x82\x3b\x56\x38\x4e\x9d\xd3\xb1\x31\x42\xce\x48\x44\xc3\xd7\x3e\xc7\x2d\x56\x1a\x54\x76\x42\x4a\x5a\x39\x1e\xee\x22\x02\xcd\x72\x90\x94\x4c\x8d\x0a\xad\x65\xad\x80\x61\x40\xe4\x6b\x6d\x2c\x88\x42\x45\x9d\xe6\xce\x47\x49\x7b\x55\x53\xa6\xa2\x91\x47\x60\xea\x21\xf0\x85\xe9\x2d\x9b\xcd\xa3\xca\x54\x8a\xf4\x2e\xe9\x6b\xfe\x9f\x9a\x1b\xfb\x16\x34\xb4\x7c\x38\xba\x0e\x49\x0b\xff\x71\x12\x2e\xf7\x6f\xbe\x80\x4d\x2e\x05\x56\x52\x90\x2c\xa7\x41\xe4\x7b\xb3\x2d\xfb\x72\x1a\x3a\xcf\x3d\x0e\x53\x2d\xaa\xd3\x4a\x4e\xbf\xb2\x2d\x0b\xa7\x1e\xf2\x75\x5d\xa6\x8e\x99\x74\xe6\x3f\xcc\x8b\x2d\x68\xd8\x04\x9a\x20\x8f\xb4\x76\xed\x11\x6d\xb8\x7d\x2d\xb9\xfb\xf5\xe7\xfd\xdb\x6c\x78\x16\xe4\x68\xec\x34\x09\xff\x29\x0d\x7e\x83\xc0\xef\x7c\xe5\x93\xc6\x52\x24\xca\x92\xeb\x37\xb7\xef\xdf\x85\x15\xd7\x9c\x1e\xf6\x4e\x42\x56\xd7\xcd\x42\x3d\x53\x80\xac\xff\x39\xc4\xe9\x3b\xba\x45\x21\x8a\xa2\x7e\x30\xe6\x02\xbe\xcf\x35\x2e\x96\x7c\x47\xff\x7c\xff\xee\x0d\x1e\xf1\x8d\xca\x30\x4c\x67\x88\x23\x0c\x91\x72\x38\xf8\xf4\xf1\xcb\x2d\xde\x4e\xe8\x71\x95\xf1\xbf\x7f\x7e\x3b\x1c\x34\x20\x4c\x82\xd9\xc1\xe8\xa8\x61\xb8\x6d\xcc\xbc\xf1\x03\x6e\x38\x78\x15\x1e\xea\x93\x5b\x60\x0b\x2b\x03\x56\x55\xd2\x4d\x2f\x80\x39\xfd\x8a\xc6\x1d\x9c\x2a\x97\xd9\xf0\x97\x2f\x1f\x3f\x44\xc6\xba\x19\x22\xd6\xfb\x61\x98\xc7\x9e\x37\x8b\xdf\x86\xb6\xdb\x56\xa3\x68\xcb\x64\xcd\x3d\xc0\xbd\x26\xd6\xd0\xba\x1e\xb3\xce\xf9\xfb\x40\xe7\x77\x60\x73\x90\xfa\x51\xef\x32\x7a\x72\x40\xa1\x94\x8a\x39\xc0\x5b\x12\xb4\x65\xf7\x30\x86\xa9\xf2\x3e\x0c\x95\xef\x95\xff\x6c\xfc\x84\xfa\xf7\x7a\x7e\xe4\xfc\x0d\x13\xe7\xbb\xba\xc7\xb9\x34\x0a\x15\xec\x89\x35\x0d\x3d\x68\xde\x2c\x25\x49\x82\x55\x35\x6b\x23\xeb\x75\xc2\x8a\x52\xc9\x8c\xf9\x80\x21\xe0\xa8\xd1\x3c\x37\xfa\x8f\x5d\xec\x70\x08\xbb\xe2\x57\x55\xeb\xc0\x1e\x5f\x31\x74\xb4\x41\x83\xa3\x63\x8d\x0b\x93\x3e\xe1\xab\x9e\xe1\x61\x86\xb8\x26\xd6\xa1\xc3\xfd\xec\x6d\xa8\x76\x92\x61\x54\x61\xef\x94\xf6\x03\x68\x14\xe1\xb5\x8e\xa7\xd6\xab\x5c\xc8\x6c\x78\xb8\xd0\xe6\xf6\x2d\x14\x5d\x1a\xfe\x03\xe9\x34\xef\x93\x1f\x4a\xe7\x36\xe7\xd8\x7c\x3b\x24\x81\xa6\xe0\x5a\x63\x8d\x60\xf3\x39\x34\x5c\xa3\xec\xbb\xc9\x1e\xd2\xb3\x7a\x8f\x8d\x85\x59\x41\x78\x15\x73\xdd\xcd\xee\x61\x5f\xae\x19\x02\xbf\xee\x48\x4f\xe3\xe8\xb4\xfb\xf5\x31\xdf\x6f\xdd\x3e\x68\xbf\xbc\xe1\xb9\xe1\xc7\x10\xa6\x10\x5e\x1c\xe1\xa9\x81\x0d\xe4\xbe\xae\xff\x3f\x00\x00\xff\xff\xc8\x18\x94\x09\xc5\x0f\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4037, mode: os.FileMode(420), modTime: time.Unix(1456558002, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsLogoSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x53\xcd\x4e\xe3\x30\x10\x7e\x95\x28\x7b\xb5\x27\xf6\xd8\x1e\xdb\xa8\x45\xda\x3d\x71\xe8\x1e\x90\x90\x0f\xdc\xdc\x25\xd0\x4a\x81\x52\x88\x28\xbc\xfd\x8e\xed\x48\x40\x51\xa4\x91\x33\xff\xdf\x7c\x33\xab\xd7\xb7\x87\x6e\x7f\xb7\xee\xa3\x57\x5b\xe3\xd0\xc8\x18\xcc\x3f\x69\xf3\x56\xc9\x1c\x8d\x97\xc6\x7b\x7f\x3f\x7a\x47\xd6\xa9\xbe\xbb\xcb\x73\x96\x4f\xf9\x71\x5c\xf7\x9b\xfc\x31\xbe\x74\xba\xef\xde\x1f\xa7\xa7\xd7\x75\xbf\x9b\xe7\xe7\x8b\x61\x38\x9d\x4e\x70\x32\x70\x78\x79\x18\x50\x29\x35\x70\xfe\xbe\x7b\xdb\x8f\xa7\x3f\x87\xf7\x75\xaf\x3a\xd5\xe9\xa8\xc0\x87\x8e\x0c\xb8\xd0\x5f\xae\xe6\xfd\x3c\x8d\x97\xbb\x6d\x37\x1d\x1e\x0e\xab\xa1\xfd\xae\x9e\xf3\xbc\xeb\xb8\xad\xbf\x16\xc1\x0a\xed\x39\x62\x92\x46\x43\x88\x42\xdb\x4d\x55\x5a\x07\xde\x27\x17\x36\x4a\x18\x0f\x2e\x26\xa4\x66\x70\x60\x29\xd5\x90\xdb\xbe\x7b\x9d\x3f\x26\xee\xf6\x7e\x3f\x4d\x17\xbf\x8c\xb5\xd1\x8d\xfd\xf0\x25\x7f\xac\x39\x8d\x01\x74\x89\x38\x1a\xaf\x82\x02\xc4\x64\x1c\x28\x3a\x2a\x69\x21\x38\xa9\xc1\x04\x49\x10\xed\x6f\x27\x9c\x50\xf5\xf3\x16\x0c\x0a\xa4\xec\x80\x58\x5b\x44\x35\x48\x27\x10\x82\xb9\x26\xee\x49\x70\xc7\x14\x45\x7b\x12\xf8\xa5\x82\x73\xec\x90\xd4\x55\xd1\x27\xb4\x80\x26\x6b\x05\x11\x45\x93\x25\x8d\x16\xac\x76\x92\x21\x06\xa1\x11\xa8\x89\x66\xf1\x80\x24\xf1\x48\xdc\x14\xff\x47\x20\x53\x9c\xcd\xcd\x17\x28\xe7\xc0\x31\x06\xbd\xdd\x7e\x03\xae\x55\x04\xcd\x00\x0c\x04\x9f\x35\x81\xf6\xa2\xc9\x56\xa4\xd4\xe6\xaa\xdc\x3f\x2e\xb2\xe9\x09\x6c\xe0\x79\x04\x7f\x2c\xc5\xb9\x2b\x64\x7c\xa0\x6f\x34\x73\x80\x4c\x8a\x3a\xaa\xe2\xcf\x8b\x54\x00\x14\xe6\xac\xce\xda\x00\x31\x8e\x2a\x6b\x1a\xc9\x95\x39\xaa\x61\xc3\x45\x36\x8b\xe7\xb9\x4b\x2c\xce\xc1\x2e\xb2\x19\x2a\x13\x3c\x39\x7a\x23\x20\xba\x8a\x25\x73\x52\x3b\x2e\xe6\x75\xaa\x30\x6e\x1f\x19\x81\xa9\x38\x50\x33\x77\x04\x4e\x22\x43\x92\x3c\x57\x1d\x33\x15\x8e\xe8\x93\x28\x92\xa6\xb2\x03\xde\x36\xb1\xa8\x45\x51\x1f\x39\x12\x75\x7d\xb6\x57\xcd\x31\x7f\x3e\xf3\x59\x9c\x68\x71\xe2\xac\x8a\x68\x55\xae\x35\xf2\x5a\x46\x61\xb9\x27\x6e\x70\xf9\x51\xa0\xfc\x0f\xaa\x5c\x1e\xdd\xfd\x77\xaa\x6c\x28\x5c\xd7\x95\x4e\x65\xbb\x37\xed\x86\x78\xfb\x52\x5d\xfd\xcd\xe2\xe1\x42\xaa\x57\x31\xd5\x4b\x91\x3c\xbd\xf8\x63\x15\x3e\x6f\xa0\xdc\xe6\xe5\xff\x00\x00\x00\xff\xff\xba\x35\x64\xfb\x01\x04\x00\x00")

func assetsLogoSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsLogoSvg,
		"assets/logo.svg",
	)
}

func assetsLogoSvg() (*asset, error) {
	bytes, err := assetsLogoSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/logo.svg", size: 1025, mode: os.FileMode(420), modTime: time.Unix(1455944824, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/logo.svg": assetsLogoSvg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{
		}},
		"logo.svg": &bintree{assetsLogoSvg, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
