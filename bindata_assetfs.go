// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/logo.svg
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x57\x7b\x73\xdb\xb8\x11\xff\x9b\xfa\x14\x5b\x75\x6e\x24\x4d\x29\x52\xa2\xed\x38\x66\x48\xb5\xd7\xf4\x3a\xc9\x4d\x5e\x93\xb8\xbd\xde\x74\xfa\x07\x44\x2c\x49\xc4\x20\xc0\x02\xa0\x1e\xed\xe4\xbb\x77\x00\x90\x7a\xd9\xe7\x66\xec\x11\xc5\x05\xf0\xdb\xd7\x6f\x77\xa1\xec\x77\x7f\xf9\xf8\xfa\xfe\xd7\x4f\x3f\x41\x6d\x1a\xbe\x1a\x65\xc3\x03\x09\x5d\x8d\x82\xcc\x30\xc3\x71\xb5\x46\xce\x99\xa8\x6a\xd2\x44\x85\xa4\xa8\xb3\xd8\xcb\x47\x41\xc6\x99\x78\x80\x5a\x61\x99\x4f\x6a\x63\x5a\x9d\xc6\x71\x29\x85\xd1\x51\x25\x65\xc5\x91\xb4\x4c\x47\x85\x6c\xe2\x42\xeb\x3f\x96\xa4\x61\x7c\x9f\x7f\x96\x6b\x69\xe4\x1f\xbe\x70\xb2\x4e\xaf\x17\x8b\xf0\x6a\xb1\x98\x80\x42\x9e\x4f\xb4\xd9\x73\xd4\x35\xa2\x99\x80\xd9\xb7\x98\x4f\x0c\xee\x8c\x3d\x3b\xb1\xba\x1a\x34\x04\x04\x69\x30\x1f\x6f\x18\x6e\x5b\xa9\xcc\x18\x0a\x29\x0c\x0a\x93\x8f\xb7\x8c\x9a\x3a\xa7\xb8\x61\x05\xce\xdd\x4b\x08\x4c\x30\xc3\x08\x9f\xeb\x82\x70\xcc\x97\x63\x8b\xe2\x94\x78\xf8\xf1\x00\x6f\x17\x02\xeb\x7a\x08\x6b\x49\xf7\xf0\xdf\x51\x10\x04\x0d\xd9\x79\x9c\x14\x5e\x5e\x2f\xda\xdd\x2b\x2f\x54\x15\x13\x29\x2c\x80\x74\x46\x3a\x51\x4b\x28\x65\xa2\x4a\x61\xb9\x68\x77\x90\x0c\x1f\x6e\xcd\xc6\x62\xee\xfd\x4e\x61\xe2\x3d\x07\xeb\xf9\x24\x84\x1f\x15\x23\x3c\x04\x8d\x8a\x95\xaf\xe0\xb0\x7b\x8b\xac\xaa\x4d\x0a\x57\x8b\xc5\x11\x42\xb3\xff\x60\x0a\x57\x2f\x7a\xd8\x35\x29\x1e\x2a\x25\x3b\x41\xe7\x85\xe4\x52\xa5\xb0\xad\x99\x41\xb7\xd6\x0b\x54\xb5\x9e\x26\x8b\xd0\xfd\xcf\xec\xc2\xb7\x51\x10\xfc\x9e\xcb\x4a\x7a\xef\x7a\xcf\xae\x17\x47\xcf\x0e\xee\xde\x5d\xff\x70\xe6\x6c\x74\x83\x0d\x2c\x06\x90\x7a\x19\x42\x9d\x04\x1e\xe6\xcc\xe4\xeb\xc7\x26\x2f\xb1\x79\x24\x52\x5e\xe6\xb0\x92\x27\x60\x7a\xcf\xed\x3a\x13\x6d\x67\x42\x58\x77\xc6\x48\x71\xb2\xd5\x23\x45\x2f\x1f\xa3\x47\x2f\xd5\xa9\xf0\x7b\x63\x7f\x50\x76\x16\x9d\xbb\xdb\xe8\xf6\xe6\x87\xf3\x2c\x27\x51\x72\xf3\x03\x2c\xa3\x65\xe2\x57\x0e\x27\xff\xe9\x38\x55\xd4\x58\x3c\xac\xe5\xee\x5f\x67\x40\x47\xb2\x48\xcd\x0c\x93\x22\x05\xb2\xd6\x92\x77\x7d\xd2\x8c\x6c\x53\x88\x92\x9b\xde\x74\x8e\xa5\x49\x7d\xc4\x4f\x18\xe7\xfe\x06\x95\x9c\xac\x91\x3f\x8e\xc8\x80\x40\x99\x6e\x39\xd9\xa7\xb0\xe6\xb2\x78\x38\x03\x5a\x0e\xc9\x3c\xfa\xe4\xb1\x93\x9b\x9e\x0a\x47\x23\x15\x72\x62\xd8\x06\x07\xad\xa7\x89\x58\x4b\x45\x51\xcd\x15\xa1\xac\xd3\x29\x2c\x0f\xba\xfb\x05\x57\x68\x29\x08\x29\xce\x88\x79\x64\xea\x63\x16\x5b\xd2\xbe\x58\x84\xb0\xbc\x5d\x86\x70\x77\x37\x3b\xb1\x7b\xee\x43\x34\xe8\x38\x98\xee\xb8\xe9\x58\xe6\xe2\xa8\x88\x18\x6c\x77\xa1\x87\xe8\xf6\x46\x87\x50\x3b\x6a\xf5\x2f\x97\x7a\x9d\xf8\xdc\xc3\xb4\x96\x1b\x54\xde\xcf\xa2\x53\xda\x1a\xd7\x4a\x26\x0c\xaa\x8b\x8d\x94\x69\xb2\xe6\x48\xfb\x98\x3c\xe5\x12\x99\xde\x5c\x85\xb7\xd7\xe1\xdd\x55\x18\xdd\x78\x9f\x06\xcc\x2d\x61\xc6\x03\x8e\x82\x20\xd2\x5d\x51\xa0\xd6\x21\x44\x25\x61\xbc\x53\xf8\x2c\xe8\x49\xa0\x42\x88\x92\xd9\x49\xec\x53\x58\xb6\x3b\xd0\x92\x33\xfa\x74\x4c\x9f\x8b\xf7\x09\x2b\x96\x43\xa5\x5a\xeb\xfe\xbf\x4d\xd3\xe4\x7a\x19\x42\x92\x24\xee\xe3\xd4\xa0\xd3\x4d\xcb\xbb\x9b\x10\x92\xbb\x10\x6e\x17\x8f\x8c\xb9\x5c\x73\x9a\xff\xd4\x20\x65\x04\xa6\xc7\x0e\xf5\xc2\x76\xad\x99\xb7\xe4\xb2\x6d\x9f\x96\x43\xf2\xb2\x67\xf4\xb7\xdf\xc6\xba\xfe\x5e\xac\xc5\x05\x56\x16\x3b\x86\xaf\x46\x59\xec\xc7\x65\x66\x0f\xda\x11\x63\x5f\x51\xd9\x99\x92\xb1\xa6\x02\x46\xf3\xb1\x6d\xbc\x63\xd0\xaa\xf0\x5f\x23\xbd\xa9\xdc\x34\x8a\x87\xbd\x76\xbe\x11\x26\xec\x21\x7b\xae\x5e\x3e\x9a\xba\xc0\x34\x10\xd0\xb2\x60\x84\x83\x8d\x7d\x0b\x14\x29\x2b\x88\x41\x0a\x46\x5a\xd1\x96\x89\x0a\x4c\x8d\xc0\x65\x41\x38\x50\xdc\x20\x97\x2d\x2a\x28\x64\xd3\x74\x82\x99\x7d\x94\xc5\xf5\xd2\x6a\x0b\xb2\x76\xf5\x0b\x02\x51\xe8\x16\x99\xe9\x51\x5a\x25\x37\xcc\xe6\x1f\x08\x94\x8a\xa1\xa0\x7c\x1f\x82\x26\x25\x02\x11\x14\xb6\xc8\x0b\xd9\xd8\x65\x14\x1b\xa6\xa4\x68\x50\x18\x28\xa5\x02\xdc\xb5\x68\xf7\x17\x48\xdd\x4e\xa2\x5b\xa6\x9c\x3d\x58\xd4\x42\x72\x59\x31\x6d\x74\x08\x0a\x2b\xa2\x28\x47\xad\x41\x96\x50\xa1\xa0\xa8\xc2\xfe\x09\x8c\xa2\x30\xcc\xec\x1d\x02\xee\x5a\x85\x5a\x33\x29\x6c\xa7\xde\x75\x84\x83\xb4\x1a\x0c\x31\x4e\xe6\x4a\x8f\x71\x66\xf6\x21\xb4\xf5\x5e\x33\xeb\x33\x69\x5b\x24\x8a\x88\x02\xfb\x44\xda\xec\x85\xa0\x88\x15\x90\x0a\x41\x2a\xdb\xd5\x58\xc5\xa4\x88\xb2\xb8\xf5\xb1\xa0\x6c\xe3\xd2\xa4\x0d\x31\x9d\x9e\x37\xa8\x35\xa9\x70\xbc\xca\x62\xca\x36\x17\x5b\x38\x29\x1e\xe6\xa5\x54\x8d\xbb\x35\x04\x59\x9d\xac\x7e\x96\x4c\x40\xa7\x41\x0a\x3b\x60\x8a\x87\x34\x8b\xeb\xc4\xaf\xfa\xa1\x72\xbc\x6e\x8c\xa1\xe5\xa4\xc0\x5a\x72\x8a\x2a\x1f\x63\x43\x18\x07\x42\xa9\xf5\x74\xec\x14\x38\xd1\xfc\x20\xb2\xa3\xa3\x94\x45\xa7\x1d\x9e\xc3\xf4\xbd\xbf\x94\x2a\x1f\xdb\xbd\x4c\x54\x73\xce\xb4\x99\xcb\xd6\xcc\x99\xf0\x66\x9d\x6b\x1e\xa6\x92\xd7\xf0\xd4\xa1\xfe\x62\xf5\xe4\x92\x3b\x8d\xd4\xe3\xfe\xc8\xb5\xb4\x06\x43\x83\x96\x2f\x96\x6d\x8f\x98\xda\xa3\x80\x45\x89\x60\xfa\x77\xc9\xbb\x06\x61\xcb\x38\x87\xb5\x25\xe7\x36\x82\x5f\x10\x6a\x62\x10\x74\xd7\xa2\x2a\x79\x27\x3b\x0d\x3e\x18\x5f\x3b\x6d\x80\x68\x68\xba\xa2\xb6\xcf\xbd\xec\x80\xca\x68\xe6\x5c\x8f\x9d\xef\x2e\x23\x41\xd6\x4f\x23\x29\x0a\xce\x8a\x87\x7c\xac\xf0\xdf\x1d\x6a\xf3\x56\x6c\x98\xc1\xe9\xec\x95\xf7\x96\xb9\xd7\xb9\xdf\x3c\x5e\x7d\x41\xe1\x6c\x27\x02\xfc\x4a\x16\xfb\x25\x57\xaf\x43\xbe\xb3\xd8\x57\xa3\xbd\x30\x16\x8a\xb5\xa7\x29\x8c\xbf\x92\x0d\xf1\x52\x17\xeb\xb2\x13\x85\x65\x24\x5c\xe8\xf7\x3d\x64\x43\xd4\x70\x7f\xc9\x81\xca\xa2\xb3\x15\x13\x55\x68\x7e\xe2\x68\xbf\xfe\x79\xff\x96\x4e\x2f\x8c\x9c\x85\xf6\x24\x00\x58\xc2\x57\x4c\x10\xfe\xce\xa5\x3c\xef\x91\x22\x26\x04\xaa\x37\xf7\xef\xdf\xf9\xb1\xd7\x4b\x0f\xb3\x28\x07\xa3\xba\x7e\xc8\x5e\x1c\x80\x1c\xc6\x9f\xbd\x9d\xae\xc8\x87\x28\x44\x51\x34\xf6\x60\xd6\xe0\x5d\xad\x20\x07\x81\x5b\xf8\xc7\xfb\x77\x6f\x8c\x69\xfb\x23\x53\xdf\xb1\x77\xb5\x8a\x64\x8b\x62\x3a\xf9\xf4\xf1\xcb\xfd\x24\x04\x14\x36\xf1\x7f\xfb\xfc\x76\x3a\xe9\x83\x30\xf7\xb0\x93\xd9\xf1\x84\x46\xd3\xc3\xbc\x71\x4d\x6f\x3a\x79\xed\x2f\xef\xf3\xfb\x7d\x8b\x93\x10\x26\xa4\x6d\xb9\x6d\x68\x4c\x8a\xf8\xab\x96\x62\x72\x7a\x58\xd0\xe9\xcf\x5f\x3e\x7e\x88\xb4\xb1\x6d\x85\x95\xfb\xa9\xef\xd1\x8e\x35\xe9\x6f\x87\xf6\xbc\x9e\x66\xd1\x86\xf0\x0e\x5d\x80\x83\xde\x56\x5f\xb3\x2e\x66\x67\xf2\xf7\x9e\xc6\xef\x98\x36\xcf\xe0\x3f\x55\x32\xb3\xa8\xaf\x19\x37\x30\x6c\x0c\x46\x87\xb8\x09\x2e\x89\x4d\xd1\x40\x9b\x81\x28\x2e\xf0\xbe\x01\xbd\xf7\xfd\xe7\x39\xc2\x5c\x74\x2a\xcf\x98\x20\x70\xdd\xe9\xaf\x52\x35\xcf\x9e\x3d\xb6\xb0\x99\xcf\x79\xc0\x4a\x98\xba\x30\x3b\x58\xc8\xf3\x1c\x92\xc5\x62\xb0\x2c\x38\x33\x2b\x2a\x38\xd1\xfa\x03\x69\xac\x81\xe3\xfe\xd2\x32\x7e\x6a\xe3\x19\xeb\xb2\x76\xf5\xab\xec\x94\xe7\x9b\xcb\x31\xd4\x44\xc3\x1a\x51\x80\xb6\x66\xc2\x27\x8e\x44\xa3\x6f\x37\xb6\xec\x95\xef\x08\xae\x4d\xf7\xe4\x3c\xf1\x30\x6a\x89\x42\x61\x3e\x48\x8a\x91\xc2\x46\x6e\xf0\x75\xcd\x38\x9d\x1e\x36\x0c\xbe\x7d\xf3\x34\xe1\x1a\xbf\xc3\x9d\xfe\x96\xf3\x5d\xee\xdc\xd7\xa8\x10\xb6\x44\xdb\x32\x42\xa5\xa4\xb2\xe3\xd3\x46\xc3\x96\xd6\xfe\xdc\xd9\x83\x7b\x46\xed\x81\x54\x84\x09\xe0\xc4\xa0\x3a\xf7\xee\x71\x25\x97\x84\x6b\x5f\xca\x4f\x16\xf3\x59\x83\x78\x75\xf4\xf7\xdb\x79\xe5\x0c\x3f\x01\xb3\xd8\x37\xae\xd5\x28\x18\x65\xb1\xbf\xb0\x64\xb1\xfb\xd5\xff\xbf\x00\x00\x00\xff\xff\xca\xe9\x5d\xf5\x0c\x10\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4108, mode: os.FileMode(420), modTime: time.Unix(1475555183, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsLogoSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xc1\x6a\x23\x3b\x10\xfc\x95\x61\xde\xe5\x3d\x68\x95\xd5\x92\xba\x25\x05\x3b\x90\x77\xca\xc1\x39\x2c\x2c\x73\xc8\x6d\xc2\x3a\x4e\x60\x12\xc7\xf1\x10\x67\xff\x7e\x91\x64\x87\xdd\xdc\xc2\x62\x28\xda\x6a\xb5\xaa\xba\xba\xed\xe5\xe1\x6d\xdb\xbd\x3f\x4d\xcf\x87\x55\xff\x30\xcf\x2f\x17\x8b\xc5\xf1\x78\xc4\xd1\x63\xf7\xba\x5d\x38\x6b\xed\xe2\xf0\xb6\xed\xbb\xb7\xc7\xcd\xf1\xff\xdd\xfb\xaa\xb7\x9d\xed\x38\x5b\xc4\xd4\xa9\x45\xf2\xfd\xe5\x72\x7e\x9c\xa7\xcd\xe5\xb4\xdb\xee\x96\x8b\x16\x2f\x5f\xc6\xf9\xa1\xfb\xb1\xea\x6f\x82\x43\x20\x8e\x88\x69\x32\x9e\x91\x32\x71\x58\xd7\xc3\x20\x88\x71\x90\xb4\xb6\xe4\x23\x24\x0f\x4e\x5b\x42\x10\x74\xa8\x25\xb7\x7d\x37\xbf\x8e\xcf\x87\xfb\xdd\xeb\xd3\xaa\xaf\xe1\x34\xce\x9b\x7f\x6d\x67\x18\x2e\xfc\xd7\x77\x87\xf9\xe7\xb4\x59\xf5\xf7\x8f\xd3\x74\xf1\x8f\x0f\x21\xcb\xa6\x5f\xfc\x46\xcf\x21\xc1\xa7\x26\x60\x28\x0f\xaf\x9b\x76\x72\x3a\x54\xd6\xf5\xe9\x86\xa4\xa1\x0a\x9a\xaa\x48\xc3\x1e\x59\xfe\x9e\x5e\x33\x7c\x20\x17\x60\xe3\xc8\x85\x9e\x1a\x5a\xb2\xc4\x14\x90\x9c\x11\x78\x21\x66\x30\x9f\xb0\xe5\x14\xce\x30\x62\xda\x47\x68\x28\x27\x8c\xa8\x24\x48\xfe\x7b\x56\xb8\x40\x3e\x43\xf6\x96\xd8\x22\x8a\x29\x04\xc4\x0a\xd5\x91\x3d\x6c\xa6\x86\xf5\x29\xc3\x8c\x50\x5c\xcd\x7c\xc5\xae\x5e\xac\xd8\x78\x62\x20\xb5\xe0\x54\xea\x9c\x50\xc3\x56\x17\xa0\xc1\x08\x74\x50\xbe\x96\x04\xf6\x43\xe9\xfa\xba\xf6\x34\xd4\x9e\x6e\x6f\x92\x54\x21\x69\x6f\x8d\xc2\x39\x53\x5e\x36\x19\x51\xae\x14\x3e\x52\x05\x5b\x3f\x31\xc2\x91\x53\xf8\x51\x11\x84\x2a\xd4\x8c\x91\xd2\x99\x87\xf8\xbd\x71\xc5\x80\x12\xb6\xa8\x3c\x34\x7f\x44\x9f\x0b\xe9\xa3\x90\x3e\x93\x09\xa2\x33\x25\xf3\x2d\x49\x5d\xb4\x4c\x67\xa5\x5f\x1c\xaa\x93\x71\x23\xf7\x7f\xee\x94\x0f\x50\x21\x49\x88\x3a\x3a\x0f\x65\x6a\xd8\x6c\x53\x30\x39\x84\x44\x2e\x41\x1b\xb4\x44\x24\x24\xb7\x37\x19\x39\x90\x35\x2c\x90\x60\x74\x2e\x0e\x1b\xd6\xe6\x21\x5b\xa8\x27\x29\xc6\x97\x69\x86\xb9\xdc\x4a\x46\x47\x17\xc1\x99\x1a\x9e\x17\x44\x15\x89\x0b\x41\x88\x27\x3c\x67\x7c\x2e\x0a\xf2\xe0\x2d\x42\x18\xb9\xfd\x04\x2a\x9e\x1d\xf7\xd9\xf8\xb2\x45\xac\x88\xf1\x84\x2d\xa7\xb0\xc9\x30\xd8\xef\x8d\x20\x64\xb2\x26\x95\xf5\xf1\x08\x79\x36\x9e\x8a\xfa\xbd\x6d\x53\xa8\xdf\xe6\x73\x5a\x46\x56\x24\x47\x0d\xdb\x1c\x14\x6c\xb8\xee\x63\x44\x92\x13\x9e\x47\xe4\xa3\xf1\xf0\x6e\xa8\x46\x7e\x75\x2c\x39\xf1\xdd\x5d\x19\x4b\xf9\x7b\xba\xfc\x15\x00\x00\xff\xff\xbf\x7a\x7d\x73\xc6\x04\x00\x00")

func assetsLogoSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsLogoSvg,
		"assets/logo.svg",
	)
}

func assetsLogoSvg() (*asset, error) {
	bytes, err := assetsLogoSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/logo.svg", size: 1222, mode: os.FileMode(420), modTime: time.Unix(1475554522, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/logo.svg": assetsLogoSvg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"logo.svg": &bintree{assetsLogoSvg, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
