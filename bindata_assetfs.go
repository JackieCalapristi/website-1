// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/logo.svg
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x57\x6b\x73\xdb\xba\x11\xfd\xac\xfc\x0a\x54\x9d\x8c\xa4\xa9\x44\x3d\x62\xc5\xb1\x2c\xba\xbd\x37\xbd\x9d\xe4\x4e\x5e\x93\xb8\x8f\x3b\x9d\x7e\x80\xc8\x95\x88\x18\x24\x58\x00\x94\xac\x76\xf2\xdf\x7b\x00\x90\x92\x28\x3b\x6e\x5e\xb6\x85\x5d\x9c\x7d\x9d\xdd\x85\x97\xbf\xfb\xf3\xc7\xd7\xb7\xbf\x7d\xfa\x85\x65\x36\x97\x37\xcf\x96\xcd\x37\xe2\xe9\xcd\xb3\xce\xd2\x0a\x2b\xe9\xe6\x0d\x4f\xee\xd8\xcf\x24\xa5\x28\x36\x19\xcf\x97\xe3\x70\x0c\x39\x4e\xee\x58\xa6\x69\x1d\xf7\x32\x6b\x4b\xb3\x18\x8f\xd7\xaa\xb0\x26\xda\x28\xb5\x91\xc4\x4b\x61\xa2\x44\xe5\xe3\xc4\x98\x3f\xae\x79\x2e\xe4\x3e\xfe\xac\x56\xca\xaa\x3f\x7c\x91\x7c\xb5\xb8\x98\x4c\x86\x2f\x26\x93\x1e\xd3\x24\xe3\x9e\xb1\x7b\x49\x26\x23\xb2\x3d\x66\xf7\x25\xc5\x3d\x4b\xf7\xd6\xdd\xed\x39\x5b\x39\x59\xce\x0a\x9e\x53\xdc\xdd\x0a\xda\x95\x4a\xdb\x2e\x4b\x60\x8d\x0a\x1b\x77\x77\x22\xb5\x59\x9c\xd2\x56\x24\x34\xf2\x1f\x86\x4c\x14\xc2\x0a\x2e\x47\x26\xe1\x92\xe2\x69\xd7\xa1\x78\x23\x01\xbe\xdb\xc0\x3b\x41\xc7\x45\x3e\x64\x2b\x95\xee\xd9\x7f\xf1\xb1\x93\xf3\xfb\x80\xb3\x60\xaf\x2e\x26\xe5\xfd\x75\x38\xd4\x1b\x51\x2c\xd8\x84\xf1\xca\x2a\x7f\x54\xf2\x34\x45\x5e\x16\x6c\x0a\x25\x36\x6b\xbe\x78\x99\xcb\xc5\x28\xc4\xbd\x60\xbd\x10\x39\x73\x91\xf7\x86\xec\x27\x0d\xd7\x86\xcc\x90\x16\xeb\x6b\x76\xd0\xde\x91\xd8\x64\x76\xc1\x90\x96\x23\x84\x11\xff\x21\x1c\xbd\xac\x61\x57\xa8\xc7\x46\xab\xaa\x48\x47\x89\x92\x4a\x2f\xd8\x2e\x13\x96\xbc\xac\x3e\xd0\x9b\x55\x7f\x36\x19\xfa\x7f\x03\x27\xf8\x86\xff\xbf\x97\x6a\xa3\x42\x74\x75\x64\x28\xc0\x21\xb2\x43\xb8\x57\x17\xcf\x5b\xc1\x46\x73\xca\xd9\xa4\x01\xc9\xa6\x43\x96\xcd\x3a\x01\xa6\xe5\xf2\xc5\x43\x97\xa7\x94\x3f\x38\xd2\xe1\xcc\x63\xcd\x1e\x81\xa9\x23\x77\x72\x51\x94\x95\x45\x51\x2a\x6b\x55\x71\xa2\x1a\x90\xa2\x57\x0f\xd1\xa3\x57\xfa\xf4\xf0\x47\x73\x7f\x30\xd6\xca\xce\xd5\x65\x74\x39\x7f\xde\xae\xf2\x2c\x9a\xcd\x9f\xb3\x69\x34\x9d\x05\xc9\xe1\xe6\x3f\x3d\xa7\x92\x8c\x92\xbb\x95\xba\xff\x57\x0b\xe8\x48\x16\x65\x40\x49\x85\xa4\xf2\x95\x51\xb2\xaa\x8b\x66\x55\x09\xd7\x67\xf3\xda\x75\x49\x6b\xe4\x61\x72\xc6\x38\xff\xb7\x31\x89\x38\x48\x3e\xcc\x48\x83\x90\x0a\x53\x4a\x8e\xc0\x57\x52\x25\x77\x2d\xa0\x69\x53\xcc\x63\x4c\x01\x7b\x36\xaf\xa9\x70\x74\x12\x6d\xc9\xad\xd8\x52\x63\xf5\xb4\x10\x2b\xa5\x53\xd2\x23\xcd\x53\x51\x19\xc0\x1e\x6c\xd7\x02\xdf\x68\x0b\x56\xa8\xa2\x45\xcc\x23\x53\x1f\xb2\xd8\x91\xf6\xe5\x64\xc8\xa6\x97\xe0\xd8\xd5\xd5\xe0\xc4\xef\x51\x48\x51\x63\xe3\xe0\xba\xe7\xa6\x67\x99\xcf\xa3\xe6\x45\xe3\xbb\x4f\x3d\x43\x01\x0d\xf8\xea\xa9\x55\x7f\x38\xb7\xeb\x8f\xdb\x11\x2e\x32\xb5\x25\x1d\xe2\x4c\x2a\x6d\x9c\x73\xa5\x12\x18\x35\xfa\x4c\x11\x89\xe6\x2b\x49\x69\x9d\x93\xc7\x42\xe2\xfd\xf9\x8b\xe1\xe5\xc5\xf0\xea\xc5\x30\x9a\x87\x98\x1a\xcc\x1d\x17\x36\x00\xe2\x4b\x64\xaa\x24\x21\x03\x0f\xa3\x35\x17\xb2\xd2\xf4\x24\xe8\x49\xa2\x70\x63\x36\x38\xc9\x3d\xaa\x81\x29\x04\x7e\x89\xf4\xf1\x9c\x3e\x95\xef\x13\x56\x4c\x9b\x4e\x75\xde\xfd\x7f\x9f\xfa\xb3\x0b\xe0\xcc\x66\x33\xff\xe5\xd4\xa1\x53\xa5\xe9\xd5\x1c\x72\xf8\x7c\x39\x79\xe0\xcc\xb9\xcc\x5b\xfe\x53\x4e\xa9\xe0\xac\x7f\x9c\x50\x2f\xdd\xd4\x1a\x04\x4f\xce\xc7\xf6\x69\x3b\xcc\x5e\xd5\x8c\xfe\xf6\x7d\xac\x8b\x1f\xc5\x9a\x9c\x61\x2d\xc7\x9e\xe1\x58\x96\xe3\xb0\x2d\x97\xee\xa2\x5b\x31\xee\x23\x69\xb7\x53\x96\x22\xdf\x30\x91\xc6\x5d\x37\x78\xbb\xcc\xe8\x24\xfc\x18\x99\xed\xc6\x6f\xa3\x71\xa3\xeb\xf6\x1b\x17\x85\xbb\xe4\xee\x65\xd3\xf3\xa5\xcb\x84\x61\x1c\x35\x4d\x30\xb9\x98\x4b\x7d\xc9\x52\xc4\x92\x70\x0b\xf2\x61\xb2\xe1\x68\x07\x4d\x66\x33\x62\xe8\x79\x28\x61\x17\x92\x54\x25\x78\x8c\x0d\x9c\x57\xd8\x85\xfb\x08\x06\xa7\xce\x58\x67\x59\xde\xfc\x9d\x18\x47\x3d\x9d\x50\xd8\x1a\xa5\xd4\x6a\x2b\x5c\xf9\x61\x6b\xad\x05\x15\xa9\xdc\x63\x4e\xf2\x35\x74\x8b\x94\xed\x48\x42\xdd\x89\xa9\xd8\x0a\xad\x8a\x1c\xbb\x97\xad\xd1\x43\x74\x0f\x43\xd0\x4f\x80\xe3\x34\xb9\x29\x85\xf6\xfe\x50\x92\x15\xa8\xf0\x46\x18\x0b\x6a\x6b\xda\x70\x9d\x62\xcd\x1b\xa6\xd6\x8c\x6f\x68\xc8\x7c\x0b\x09\x09\xf7\x86\x6c\x03\x8b\xa4\x87\x58\xf3\xae\x89\x79\x38\xd4\x3c\x21\x77\x53\x8a\x0d\x0e\xdd\xd8\xbe\xaf\x6a\x11\x2c\x1b\x81\x11\xcf\x35\x83\x7d\xe3\xae\xb0\x24\xe3\xb8\x81\x56\x85\x45\x91\x20\xe4\x32\x44\x9c\x8a\xad\xaf\x85\xb1\xdc\x56\x66\x94\xc3\x07\xd8\xef\xde\x2c\xc7\x90\x9c\xa9\x48\x24\x7f\x84\xb8\x72\xff\x34\x40\x3d\x66\x37\xbf\xa2\xff\x59\x05\xb7\x0b\xb7\x45\x92\xbb\x05\x72\x39\x0b\xd2\xb0\x39\x8e\x6f\x8a\x2e\xc3\xf0\x4d\x28\x53\x12\xc1\xc4\x5d\x42\x65\x25\x43\x5b\x69\x98\xec\x7a\x03\xfe\x68\x74\x38\x72\xfb\x61\xad\x92\xca\x78\x3c\x8f\x19\x06\x3c\x5c\x88\xbb\x4e\x17\xa9\x1c\x49\x04\x34\x52\xa5\x1d\x89\x22\xb8\xd5\xb6\xdc\xac\x9e\x60\xe1\xb1\x4b\xf5\xeb\xe9\x51\x91\xbf\x4d\x69\xc0\xfd\x49\x1a\xe5\x1c\x66\x39\x39\x56\x38\x4e\x9d\xd3\xb1\x06\x61\x0e\x24\x62\xfd\xbf\x61\x99\x41\x79\x27\xa4\x64\x2b\xc7\xc0\x5d\xc4\x40\xb0\x0c\xf4\x64\xa6\x42\x6d\xd6\xb2\x52\xc8\x5e\xc8\xc5\xd7\xca\x58\x50\x84\xe5\x55\x92\xb9\xef\x7b\x55\xb1\x54\x45\x03\x1f\xf9\xd8\x87\xee\x0b\xd2\x59\xd6\x1b\x47\x15\x89\x14\xc9\x5d\xdc\xd5\xf4\xef\x8a\x8c\x7d\x0b\xfa\x59\xea\x0f\xae\x43\xb0\xc2\x7f\x1c\x05\xe5\xee\xcd\x17\xb0\xc8\xb9\xce\x0b\x16\x24\xcb\x71\x10\xf9\x9e\x6c\xca\xbd\x1c\x87\x8e\x73\x8f\xc2\x44\x8b\xf2\xb4\x82\xe3\xaf\x7c\xcb\xc3\xa9\x4f\xf5\xba\x2a\x12\xc7\x48\x76\x66\x3f\xcc\x89\x2d\xe8\x57\x3b\x1a\x23\x8e\xa4\x72\x6d\x11\x6d\xc8\xfe\x22\xc9\xfd\xf8\xf3\xfe\x6d\xda\x3f\x73\x72\x30\x74\x37\x19\xfe\x28\x0d\x5e\x83\xb8\xef\x7c\xc5\xe3\x1a\x29\x12\x45\x41\xfa\xcd\xed\xfb\x77\x61\xb5\xd5\xa7\x87\x7d\x13\x33\xab\xab\x7a\x91\x9e\x5d\x80\xac\xfb\x39\xf8\xe9\x3b\xb9\xc9\x42\x14\x45\xdd\x00\xe6\x1c\xbe\xcf\x34\x14\x0b\xda\xb1\x7f\xbc\x7f\xf7\x06\x8f\xf7\xfa\x4a\x3f\x4c\x65\x88\x23\x0c\x8f\xa2\xdf\xfb\xf4\xf1\xcb\x2d\xde\x4c\xe8\x6d\x95\xd2\x5f\x3f\xbf\xed\xf7\xea\x24\x8c\x02\x6c\x6f\x70\xbc\x61\xc8\xd6\x30\x6f\xfc\x60\xeb\xf7\x5e\x87\x07\xfa\xe8\x16\xb9\x05\x4a\x8f\x97\xa5\x74\x53\x0b\xc9\x1c\x7f\x45\xc3\xf6\x4e\x2f\x17\x69\xff\xd7\x2f\x1f\x3f\x44\xc6\xba\xd9\x21\xd6\xfb\x7e\x98\xc3\x9e\x35\x8b\xef\xa7\xb6\xdd\x4e\x83\x68\xcb\x65\x45\x3e\xc1\x9d\xda\xd7\xd0\xb2\x3e\x67\xad\xf3\xf7\x81\xc6\xef\xc0\xe2\x27\xf0\x1f\xeb\x98\x41\x54\xb7\x8c\x5f\x0a\x2e\x07\xcf\x0e\x79\x2b\xa4\xe2\xae\x44\x0d\x6d\x1a\xa2\xf8\xc4\x87\xf9\xf3\x3e\x8c\x9f\xa7\x08\x73\x36\xa8\x02\x63\x3a\x1d\x3f\x9c\xfe\x82\xd9\xf4\xe4\xdd\xe3\x04\x1b\x84\x9a\x77\xc4\x9a\xf5\x7d\x9a\x3d\x2c\x8b\xe3\x18\x4b\x6d\xd2\x78\xd6\x69\xb9\x15\x25\x92\x1b\xf3\x01\xe3\xc2\x91\xa9\x7e\x98\x74\x1f\x53\x6c\xb1\x0e\x5b\xe5\x37\x55\xe9\xc0\x37\x5f\x63\x4c\x00\x83\x81\x40\x05\xa6\x36\xdc\x64\x9f\xf0\x4b\xa1\xa1\x30\x6d\x5c\xdb\xeb\x30\x11\xfc\x94\xae\xc9\x79\x12\x61\x54\x62\x43\x15\xf6\x03\x88\x17\xe1\x5d\x8f\x47\xd9\xeb\x4c\xc8\xb4\x7f\x50\x68\x62\xfb\x16\x68\x22\x0d\xfd\x40\x38\xf5\x4b\xe6\x87\xc2\xb9\xcd\x08\x3b\x72\x87\x20\xd0\x46\xa4\x35\x16\x0e\x76\xa4\xcb\x86\x6b\xad\x7d\x3b\xd8\x43\x78\x56\xef\xb1\xdb\x30\x5d\x18\xde\xcf\xa4\xdb\xd1\x3d\xec\xe4\x35\x87\xe3\xd7\x2d\xe9\xa9\x1f\xad\x01\x71\x7d\x8c\xf7\x5b\xbb\x73\x9a\x5f\xf3\xf0\x30\xf1\x83\x0b\x73\x0b\x6f\x93\xf0\x28\xc1\xae\x72\xbf\xd8\xff\x2f\x00\x00\xff\xff\x04\xe7\x0f\x97\xef\x0f\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4079, mode: os.FileMode(420), modTime: time.Unix(1456792205, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsLogoSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x53\xcd\x4e\xe3\x30\x10\x7e\x95\x28\x7b\xb5\x27\xf6\xd8\x1e\xdb\xa8\x45\xda\x3d\x71\xe8\x1e\x90\x90\x0f\xdc\xdc\x25\xd0\x4a\x81\x52\x88\x28\xbc\xfd\x8e\xed\x48\x40\x51\xa4\x91\x33\xff\xdf\x7c\x33\xab\xd7\xb7\x87\x6e\x7f\xb7\xee\xa3\x57\x5b\xe3\xd0\xc8\x18\xcc\x3f\x69\xf3\x56\xc9\x1c\x8d\x97\xc6\x7b\x7f\x3f\x7a\x47\xd6\xa9\xbe\xbb\xcb\x73\x96\x4f\xf9\x71\x5c\xf7\x9b\xfc\x31\xbe\x74\xba\xef\xde\x1f\xa7\xa7\xd7\x75\xbf\x9b\xe7\xe7\x8b\x61\x38\x9d\x4e\x70\x32\x70\x78\x79\x18\x50\x29\x35\x70\xfe\xbe\x7b\xdb\x8f\xa7\x3f\x87\xf7\x75\xaf\x3a\xd5\xe9\xa8\xc0\x87\x8e\x0c\xb8\xd0\x5f\xae\xe6\xfd\x3c\x8d\x97\xbb\x6d\x37\x1d\x1e\x0e\xab\xa1\xfd\xae\x9e\xf3\xbc\xeb\xb8\xad\xbf\x16\xc1\x0a\xed\x39\x62\x92\x46\x43\x88\x42\xdb\x4d\x55\x5a\x07\xde\x27\x17\x36\x4a\x18\x0f\x2e\x26\xa4\x66\x70\x60\x29\xd5\x90\xdb\xbe\x7b\x9d\x3f\x26\xee\xf6\x7e\x3f\x4d\x17\xbf\x8c\xb5\xd1\x8d\xfd\xf0\x25\x7f\xac\x39\x8d\x01\x74\x89\x38\x1a\xaf\x82\x02\xc4\x64\x1c\x28\x3a\x2a\x69\x21\x38\xa9\xc1\x04\x49\x10\xed\x6f\x27\x9c\x50\xf5\xf3\x16\x0c\x0a\xa4\xec\x80\x58\x5b\x44\x35\x48\x27\x10\x82\xb9\x26\xee\x49\x70\xc7\x14\x45\x7b\x12\xf8\xa5\x82\x73\xec\x90\xd4\x55\xd1\x27\xb4\x80\x26\x6b\x05\x11\x45\x93\x25\x8d\x16\xac\x76\x92\x21\x06\xa1\x11\xa8\x89\x66\xf1\x80\x24\xf1\x48\xdc\x14\xff\x47\x20\x53\x9c\xcd\xcd\x17\x28\xe7\xc0\x31\x06\xbd\xdd\x7e\x03\xae\x55\x04\xcd\x00\x0c\x04\x9f\x35\x81\xf6\xa2\xc9\x56\xa4\xd4\xe6\xaa\xdc\x3f\x2e\xb2\xe9\x09\x6c\xe0\x79\x04\x7f\x2c\xc5\xb9\x2b\x64\x7c\xa0\x6f\x34\x73\x80\x4c\x8a\x3a\xaa\xe2\xcf\x8b\x54\x00\x14\xe6\xac\xce\xda\x00\x31\x8e\x2a\x6b\x1a\xc9\x95\x39\xaa\x61\xc3\x45\x36\x8b\xe7\xb9\x4b\x2c\xce\xc1\x2e\xb2\x19\x2a\x13\x3c\x39\x7a\x23\x20\xba\x8a\x25\x73\x52\x3b\x2e\xe6\x75\xaa\x30\x6e\x1f\x19\x81\xa9\x38\x50\x33\x77\x04\x4e\x22\x43\x92\x3c\x57\x1d\x33\x15\x8e\xe8\x93\x28\x92\xa6\xb2\x03\xde\x36\xb1\xa8\x45\x51\x1f\x39\x12\x75\x7d\xb6\x57\xcd\x31\x7f\x3e\xf3\x59\x9c\x68\x71\xe2\xac\x8a\x68\x55\xae\x35\xf2\x5a\x46\x61\xb9\x27\x6e\x70\xf9\x51\xa0\xfc\x0f\xaa\x5c\x1e\xdd\xfd\x77\xaa\x6c\x28\x5c\xd7\x95\x4e\x65\xbb\x37\xed\x86\x78\xfb\x52\x5d\xfd\xcd\xe2\xe1\x42\xaa\x57\x31\xd5\x4b\x91\x3c\xbd\xf8\x63\x15\x3e\x6f\xa0\xdc\xe6\xe5\xff\x00\x00\x00\xff\xff\xba\x35\x64\xfb\x01\x04\x00\x00")

func assetsLogoSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsLogoSvg,
		"assets/logo.svg",
	)
}

func assetsLogoSvg() (*asset, error) {
	bytes, err := assetsLogoSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/logo.svg", size: 1025, mode: os.FileMode(420), modTime: time.Unix(1455944824, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/logo.svg": assetsLogoSvg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{
		}},
		"logo.svg": &bintree{assetsLogoSvg, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
