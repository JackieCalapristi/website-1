// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/logo.svg
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x58\x6d\x73\xda\x48\xf2\x7f\x2d\x7f\x8a\xfe\xeb\x5f\x5b\xe0\x3a\x21\x01\xb6\xe3\x98\x48\xdc\xed\xe5\x72\x97\xa4\xf2\x54\x89\x77\xf7\xb6\xae\xee\xc5\x20\x35\x68\xe2\xd1\x8c\x6e\x66\x04\xe6\x5c\x7c\xf7\xab\x79\x90\x10\xe0\x75\x4c\x52\x80\xa6\xa7\x9f\xbb\x7f\xdd\x38\xfd\xbf\xbf\x7d\x7e\x7d\xfb\xfb\x97\x37\x50\xea\x8a\xcd\xcf\xd2\xf6\x03\x49\x31\x3f\x0b\x52\x4d\x35\xc3\xf9\xc3\x03\xc4\xff\x90\xa2\xa9\x3f\x91\x0a\x61\xb7\x4b\x13\x77\x7e\x16\xa4\x8c\xf2\x3b\x28\x25\x2e\xb3\x41\xa9\x75\xad\x66\x49\xb2\x14\x5c\xab\x78\x25\xc4\x8a\x21\xa9\xa9\x8a\x73\x51\x25\xb9\x52\x7f\x5e\x92\x8a\xb2\x6d\xf6\x55\x2c\x84\x16\x7f\xfa\xc6\xc8\x62\x76\x39\x1e\x47\x17\xe3\xf1\x00\x24\xb2\x6c\xa0\xf4\x96\xa1\x2a\x11\xf5\x00\xf4\xb6\xc6\x6c\xa0\xf1\x5e\x1b\xde\x81\xd1\x55\xa1\x26\xc0\x49\x85\x59\xb8\xa6\xb8\xa9\x85\xd4\x21\xe4\x82\x6b\xe4\x3a\x0b\x37\xb4\xd0\x65\x56\xe0\x9a\xe6\x38\xb2\x0f\x11\x50\x4e\x35\x25\x6c\xa4\x72\xc2\x30\x9b\x84\x46\x8a\x55\xe2\xc4\x87\xad\x78\x43\x08\x8c\xeb\x11\x2c\x44\xb1\x85\x87\xb3\x20\x08\x2a\x22\x57\x94\xcf\x60\xfc\xca\x3c\xd5\xa4\x28\x28\x5f\xb5\x8f\xc6\xc9\x91\x73\x68\x06\x03\xe7\x12\x18\x97\x06\x11\xfc\x2c\x29\x61\x11\x28\x94\x74\xf9\x0a\xba\xdb\x1b\xa4\xab\x52\xcf\xe0\x62\xdc\x13\xa1\xe8\x7f\x71\x06\x17\x2f\xea\x7b\x7b\xb6\x20\xf9\xdd\x4a\x8a\x86\x17\xa3\x5c\x30\x21\x67\xb0\x29\xa9\x46\x4b\xf3\x07\x72\xb5\x18\x4e\xc7\x91\xfd\x7f\x6e\x08\xbb\xb3\x20\x50\x98\x6b\x2a\xb8\x33\xbc\x33\x75\x82\x95\x33\xb7\x77\xe5\xff\x29\xd7\x52\x40\xed\xae\xf6\x6c\x98\x60\x75\x6c\xd6\x44\xba\x33\xc3\xee\xf9\xfa\x0a\x46\x5a\xd4\x47\xe1\x19\x2d\x84\xd6\xa2\x9a\x41\x3c\xbd\xda\xf3\xb6\xaa\x15\x23\xf9\x9d\x09\x8c\x7b\xc4\x35\x72\xad\x9c\xc8\x53\xc7\x8d\x9f\x2f\xc6\x11\x4c\xae\x27\x11\xdc\xdc\x9c\xf7\x63\xd0\x05\xa5\x2f\xfd\xc7\xe2\xae\x26\x11\x4c\x2e\xcc\xdb\xcb\xcb\x2e\x74\xb1\xaf\xa0\x08\x4c\xd1\xa3\x6c\x93\x7f\xef\x8a\x68\x06\x2f\x2f\xc7\x3e\x3b\x5d\x45\x00\x69\xb4\xe8\x22\xc3\xc4\xca\x07\xc6\x73\x5c\x8e\xf7\x1c\x9d\x98\x9b\xcb\x9f\x0e\x84\xc4\x57\x26\x3b\xfb\xfc\x94\x93\x08\xca\x69\x04\xe5\x45\xd0\xcb\x4d\x5b\x34\x97\xa7\x45\xf3\x83\x84\x95\xd3\x47\xc4\xf8\xda\xb3\xf4\x8b\x93\x12\x88\x5f\xf8\xd7\xf5\xa9\xe8\x3d\xcd\xeb\x38\xec\x0f\x23\xb1\x61\x3f\x6e\x1c\x73\xaf\x8e\x80\xd1\x47\x94\x4f\xfc\xeb\x31\xe5\x2d\xad\xe7\x60\x2b\x63\x9f\x95\xf1\xbe\xe2\x03\x46\x95\x1e\xd9\x5e\x9f\x01\x17\xbc\xab\x16\xca\xeb\x46\x47\xb0\x68\xb4\x6e\xfb\xa5\xaf\xe8\xe5\x23\xca\x5f\xca\xfe\xe1\x73\x9b\xbe\x53\x76\x50\x1a\x37\xd7\xf1\xf5\xd5\x4f\x87\x81\x99\xc6\xd3\xab\x9f\x60\x12\x4f\xa6\x8e\xd2\x71\xfe\xcb\xa2\x54\x5e\x62\x7e\xb7\x10\xf7\xff\x3e\x10\xd4\x56\x60\x50\x0b\x45\x4d\xfd\xcf\x80\x2c\x94\x60\x8d\x47\x0b\xdb\x9b\x5d\x17\x06\x0c\x97\xba\xcd\x48\x3f\x60\xbd\x02\x64\x64\x81\xec\x34\x22\xad\x84\x82\xaa\x9a\x91\xed\x0c\x16\x4c\xe4\x77\x07\x82\xf6\x51\xdf\x27\xdb\xfe\x9b\x5e\xf9\x3e\xd8\x1b\x29\x91\x11\x4d\xd7\x5d\x3e\xfa\x89\x58\x08\x59\xa0\x1c\x49\x52\xd0\x46\xcd\x60\xd2\xe9\xf6\x84\xa3\x74\x3e\x17\x2d\x4f\x50\xc4\xd9\xed\xe0\xab\xd3\xd1\x99\x6e\x1b\xd3\x16\xa1\x8d\xa3\x24\xbc\xb5\xdd\x86\x1e\xe2\xeb\x2b\x65\xc0\xc2\x74\x94\x7f\x38\x36\xc4\x1e\x1f\x7a\x38\x2b\xc5\xba\x05\x97\xbc\x91\xca\x18\x57\x0b\xca\x35\xca\xa3\x8b\x05\x55\x64\xc1\xb0\x78\x02\xc9\xc8\xf0\xea\x22\xba\xbe\x8c\x6e\x2e\xa2\xf8\xca\x23\xa3\x97\xb9\x21\x54\x77\xd0\xa6\x9a\x3c\x47\xa5\x22\x88\x97\x84\xb2\x46\xe2\x93\x32\x7b\x71\x8a\x20\x9e\x9e\xf7\x42\x3f\x83\x49\x7d\x0f\x4a\x30\x5a\x3c\x09\xcc\x8f\xd2\x7a\x45\x31\xd9\xb7\xef\x33\x4c\x1a\x4e\x2f\x27\x11\x4c\xa7\x53\xfb\xd6\xb7\xa7\x7f\x69\x72\x73\x15\xc1\xf4\x26\x82\xeb\xf1\x89\x2d\xc7\x34\x8b\xd7\x7e\x50\xd4\xa7\xf0\x31\xdd\x0f\xcc\xb3\x20\xf8\x4b\x85\x05\x25\x30\x3c\x9e\x05\xe7\x8e\xd1\xcf\x9d\xc3\xb9\xd1\x0d\x42\xd7\x70\x2d\x96\x75\xc7\xd2\xe1\x70\x7b\xbe\xf3\x36\x9d\xaa\x7a\x31\xde\x6b\x3a\xde\x4c\xfa\xfd\x39\x7d\xe9\x5b\x6c\xf7\xc7\x66\x5f\x3e\x57\xd6\xf8\x48\x56\x9a\xd8\x96\x9b\x9f\xa5\x89\xdb\x08\x53\xc3\x68\xb6\x28\xe7\xb3\x59\x9b\x52\x5a\xad\x80\x16\x59\x68\xc6\x60\x08\x4a\xe6\xee\x6b\xac\xd6\x2b\xbb\x70\x25\xed\x5d\xb3\xc2\x11\xca\x0d\x93\xe1\x6b\x77\x16\xc3\x6b\x97\x0b\xbb\x85\x05\x69\x41\xd7\x90\x33\xa2\x54\x16\xfa\xd1\xec\x08\x41\x5a\x4e\x4e\x56\x51\xa0\x0a\x08\x28\x91\x53\xc2\xc0\x14\x50\x0d\x05\x16\x34\x27\x1a\x0b\xd0\xc2\x1c\x6d\x28\x5f\x81\x2e\x11\x98\xc8\x09\x83\x02\xd7\xc8\x44\x8d\x12\x72\x51\x55\x0d\xa7\x7a\x1b\xa7\x49\x39\x99\x9f\x39\x25\xf5\xfc\x37\x04\x22\xd1\x92\xa9\xf6\x72\x6a\x29\xd6\xd4\x64\x10\x08\x2c\x25\x45\x5e\xb0\x6d\x04\x8a\x2c\x11\x08\x2f\x60\x83\x2c\x17\x95\x21\x23\x5f\x53\x29\x78\x85\x5c\xc3\x52\x48\xc0\xfb\x1a\xcd\xfd\x1c\x0b\x7b\x93\xa8\x9a\x4a\x6b\x11\xe6\x25\x17\x4c\xac\xa8\xd2\x2a\x02\x89\x2b\x22\x0b\x86\x4a\x81\x58\xc2\x0a\x79\x81\x32\xf2\x9f\x40\x0b\xe4\x9a\xea\xad\x95\x80\xf7\xb5\x44\xa5\x6c\xe9\x29\xbc\x6f\x08\x03\x61\x34\x68\xe2\xca\xd1\xe2\x07\x65\x54\x6f\x23\xa8\xcb\xad\xa2\xc6\x6b\x52\xd7\x48\x24\xe1\x39\xfa\xe4\x9b\x8c\x47\x20\x89\x39\x20\x2b\x04\x21\x0d\x34\xd3\x15\x15\x3c\x4e\x93\x7a\x1e\xd8\x5c\x24\x05\x5d\xdb\x24\x27\x3e\x5b\x36\x4a\x07\xa9\xb3\x4b\xdd\x0f\x53\x67\x28\xf6\xb6\x26\xba\x51\xa3\x0a\x95\x22\x2b\x0c\xe7\x5e\x83\xcf\xef\x74\xfe\x5e\x50\x0e\x8d\x02\xc1\xcd\x60\xcd\xef\x66\x69\x52\x4e\xbd\x0c\x37\x4d\xf7\x9b\x7b\x08\x35\x23\x39\x96\x82\x15\x28\xb3\x10\x2b\x42\x19\x90\xa2\x30\xd1\x09\xad\x36\x7b\x34\xea\x8e\xcc\xcc\x5c\x8a\xbc\x51\x4e\xa0\x93\xea\xc6\xde\x52\xc8\x2c\x34\xb7\x6d\xef\x9a\xdd\x41\xd4\x7a\x44\xb9\xb7\xff\x50\x79\x3b\x91\x9d\x92\xc7\xb8\xfc\xcf\x94\x47\x49\x96\x1b\x0b\x2f\xf8\x67\xa6\x84\x31\x1a\x2a\x34\x75\x66\xea\xf4\xa4\xc6\xbd\x18\x30\x62\x62\x18\xfe\x2a\x58\x53\x21\x6c\x28\x63\xb0\x30\x65\xbd\x89\xe1\x37\x84\x92\x68\x04\xd5\xd4\x28\x97\xac\x11\x8d\x02\x17\x90\xef\x8d\xd2\x40\x14\x54\x4d\x5e\x9a\xcf\xad\x68\xa0\x10\xf1\xb9\xf3\x3e\xb1\xee\xb7\x09\xf0\xc3\x58\xf0\x9c\xd1\xfc\x2e\x0b\x25\xfe\xa7\x41\xa5\xdf\xf1\x35\xd5\x38\x3c\x7f\x15\xfa\x66\x35\x8f\x23\x77\x39\x9c\x7f\x43\x6e\xad\x27\x1c\x1c\x25\x4d\x1c\x69\xfe\x44\x09\x3d\x3c\x6c\xa8\x99\xa5\x6f\x2c\x16\xef\x76\xc7\x55\xe5\x30\xfa\xc7\x88\x30\x9d\xff\x52\xfb\xce\x73\xa2\xfa\x05\xd3\x30\x1f\xe4\x87\x07\x49\xf8\x0a\x21\xb6\x8a\x6c\xd6\xa9\x27\x05\x69\x79\x61\x51\xe5\x96\x56\x18\xff\x5d\xc8\x8a\x68\x80\xf0\x3d\xe1\x30\x9e\x46\x70\x31\x1b\x5f\xc2\x97\x8f\x21\xec\x76\x33\x9b\x98\xee\x27\x70\x79\xd1\x4a\x68\x7d\xf9\x15\x79\x83\xbb\x5d\x5a\xb7\x84\xa0\xcf\xb0\x90\x07\xc7\x3f\xbb\xa2\xfc\x40\x39\x4e\xa0\x35\x2b\x30\x9d\xf7\xf0\x80\xbc\xe8\x0c\x4d\x3a\x4b\xfb\xe7\x69\xe2\x7d\x7b\x2c\xbc\xbd\xab\x69\xe2\x10\xd7\xfc\xee\xcd\x25\xad\xfb\xed\x93\x7c\x27\x6b\xe2\x4e\x6d\x38\x97\x0d\x77\xf1\x3f\xca\xba\x9b\x13\x6b\x22\xdb\xa5\x39\x83\x42\xe4\x8d\x41\xb8\x78\x85\xfa\x0d\x43\xf3\xf5\xaf\xdb\x77\xc5\xf0\xa8\x34\xce\x23\xc3\x09\x00\x06\xa0\x56\x94\x13\xf6\xc1\x36\x5b\xe6\x25\xc5\x94\x73\x94\x6f\x6f\x3f\x7e\x70\xbb\x96\x3f\xed\x16\xa0\x0c\xb4\x6c\xfc\xaa\x77\xc4\x00\x19\x84\x5f\x9d\x9d\x16\x94\xdb\xda\x8b\xe3\x38\x74\xc2\x8c\xc1\xf7\xa5\x84\x0c\x38\x6e\xe0\x9f\x1f\x3f\xbc\xd5\xba\xf6\x2c\x43\xb7\x28\xdc\x97\x32\x16\x35\xf2\xe1\xe0\xcb\xe7\x6f\xb7\x83\x08\x90\xe7\xa2\xc0\x5f\xbe\xbe\x1b\x0e\x7c\x10\x46\x4e\xec\xe0\x7c\xcf\xa1\x50\x7b\x31\x6f\xed\x60\x1b\x0e\x5e\xbb\xa2\x1c\xdd\x6e\x6b\x1c\x44\x30\x20\x75\xcd\xcc\x08\xa2\x82\x27\xdf\x95\xe0\x83\x3e\x33\x2f\x86\xef\xbf\x7d\xfe\x14\x2b\x6d\xc6\x00\x5d\x6e\x87\x6e\x0e\xdb\x6e\x9d\xfd\x71\x68\x0f\xb1\xec\x3c\x5e\x13\xd6\xa0\x0d\x70\xe0\x6d\x75\x80\x69\x63\x76\x70\xfe\xd1\xc1\xc7\x07\xaa\xf4\x13\xf2\x1f\xc3\xaa\xf3\xd8\x83\x95\x5d\x0a\x4c\x0c\xce\xba\xb8\x71\x26\x88\x49\x51\x5b\x36\x6d\xa1\xd8\xc0\x3b\x98\xff\xe8\x50\xfe\xa9\x82\x39\x9a\x07\xe7\x2e\x77\x01\x5d\xc2\xd0\x86\xcb\x92\x21\xcb\x32\x98\x8e\xc7\xad\x86\xe0\x40\x7c\x6c\xa1\xc1\xb6\x59\x06\xa1\x5f\x79\xc3\xc7\x2e\x1e\x54\x4f\x5a\xcf\x7f\x17\x8d\x74\x75\x63\x73\x05\x25\x51\xb0\x40\xe4\xa0\x8c\xa9\xf0\x85\x21\x51\xe8\xf0\xda\xc0\xa6\x74\x88\x6a\xc7\xa3\x2f\xb2\x20\xb0\xe3\xcf\xc0\x46\x5c\x13\x89\x5c\x7f\x12\x05\xc6\x12\x2b\xb1\xc6\xd7\x25\x65\xc5\xb0\xbb\xd0\xfa\xe6\x3a\x18\x99\xc2\x67\xb8\xe3\x97\xe4\x67\xb9\x73\x5b\xa2\x44\xd8\x10\x65\xda\x01\xa5\x14\xd2\xac\x2d\x26\x1a\xa6\x45\xb6\x87\xce\x76\xee\x69\xb9\x05\xb2\x22\x94\x03\x23\x1a\xe5\xa1\x77\xa7\x1d\xb9\x24\x4c\xb9\x96\x7c\xb4\x29\x0f\x1a\xfd\xd5\xde\xdf\xdd\x61\x07\xb4\xcb\x78\x9a\x38\x00\x9a\x9f\x05\x67\x69\xe2\x96\xcb\x34\xb1\x7f\x84\xfc\x5f\x00\x00\x00\xff\xff\x84\x0b\xd8\xb2\x9b\x14\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 5275, mode: os.FileMode(420), modTime: time.Unix(1475947496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsLogoSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x4d\x8f\x1b\x37\x0c\xfd\x2b\x83\xe9\xa5\x05\xa8\x67\x51\x14\xf5\x11\xac\x17\xd8\x9e\x72\xd8\x1c\x0a\x14\x73\xc8\x6d\x82\x7a\x37\x0b\x4c\xe2\xcc\x7a\x60\xa7\xff\xbe\xa0\x14\xbb\x6d\x8e\x41\x2e\x0f\xb4\x9e\x48\x3e\xf1\xd1\x73\x77\x3a\x3f\x0f\x5f\x3f\x2d\x9f\x4f\xfb\xf1\xe3\xb6\x7d\x79\xb3\xdb\x5d\x2e\x17\x5c\x04\xc7\xd7\xe7\x5d\xf0\xde\xef\x4e\xe7\xe7\x71\x38\xbf\x1c\x2e\xbf\x1f\xbf\xee\x47\x3f\xf8\x81\x73\x41\x2e\x43\xf2\x28\x32\xde\xdf\x6d\x2f\xdb\x72\xb8\x5f\x8e\xcf\xc7\xbb\x5d\x8f\xef\xbe\xcc\xdb\xc7\xe1\xaf\xfd\xf8\x2e\x16\xe2\x0c\xcd\x8b\x13\x46\xa9\xc4\xf1\x31\x16\x8a\x0a\x4d\x93\x66\x94\xf8\xa8\x48\x4c\x92\x21\x65\x0a\x8a\xac\xc6\x2b\x82\x4e\x2d\xef\xfd\x38\x6c\xaf\xf3\xe7\xd3\xd3\xf1\xf5\xd3\x7e\x6c\xe1\x32\x6f\x87\x5f\x9d\xa5\x0d\x8e\xe1\xe5\xb7\x71\x38\x6d\x7f\x2f\x87\xfd\xf8\xf4\xb2\x2c\x6f\x7e\x91\x18\xab\x1e\xc6\xdd\x7f\x54\x70\x0c\x5d\xc6\x64\x95\x97\x18\x10\x29\x78\xe8\xd4\xfa\x3e\x1a\xdd\xc4\x4c\x4d\xd8\xd2\xa4\x3a\x16\x54\xfd\x39\xfd\x53\x41\x55\x0a\x82\x92\x66\x56\xc4\x44\x1d\x3d\x79\x62\x8a\x28\xc1\x29\x44\x1f\x98\xc1\x4c\x1d\x3b\x57\x3c\x71\x42\x0e\x6b\x46\x8a\x76\xc2\xc8\x89\x14\x45\xb6\x08\x96\x46\xca\xea\x89\x3d\xb2\xba\x08\x9f\xed\x28\xa5\x99\x05\xbe\x52\xc7\x56\xca\x31\x23\x46\x52\x54\x7e\xe0\xd0\x2e\x36\xec\x7d\xb2\x40\x2b\x25\x6f\x79\x41\xa9\x63\xcf\x8b\x48\xd1\x9e\x7b\x4e\x90\xfc\x56\x33\x72\x9c\xf8\x6d\x7b\xd2\xd4\x9e\xf4\xfe\x5d\x89\x48\x24\x15\x92\x57\xef\x12\x42\x70\x56\xda\x55\x64\x9d\x2d\x8b\x1a\x58\x39\xef\x14\x39\x38\x81\x0a\x25\x44\xed\x70\x63\x12\x19\xb3\xba\x60\x13\xb0\xb0\x47\x56\x68\xbb\x45\xf3\x77\x89\x74\x4b\xa4\xef\x9a\xd1\xad\xd9\x1f\x4d\xa2\xd9\x5b\xe8\x5f\xb5\x3f\xe0\x6e\xd0\xf9\xa0\x4f\xff\xdf\x2e\x09\x08\x89\xb4\x40\x75\x0e\x62\xfb\xdc\xb1\xcf\x2f\x81\x29\x20\x16\x0a\x05\xa9\x43\x27\x32\xa1\x84\xd5\x55\xd4\x48\xde\xb1\x42\xa3\x4b\x7f\xd6\x62\xda\x42\x5d\xbd\x63\x8f\x24\xa4\x36\x7f\x33\x35\x6e\x76\xa7\xb8\x34\x87\x0c\xae\xd4\xb1\xfb\x67\x9e\xa3\xb0\x95\x8f\xf9\x1b\x5e\x19\xa9\xd6\xbf\x4e\xe2\x11\xe4\x81\x0b\xa4\x50\xc7\x3e\x24\x0e\x09\x25\x53\xc8\xb3\x6d\x53\x5b\xa0\x7c\x75\x2b\xc1\x17\xc7\x60\x59\x9d\x22\x56\xf2\xae\xd8\x16\x09\x62\xdd\x9c\x90\x69\x5f\x7d\xf7\xa2\xfd\xda\xae\xb4\x5a\xb1\x12\xa8\x63\x6f\x94\xc0\x36\xd3\x6a\xff\xc5\xa2\xdf\xf0\x6a\x94\x64\x27\x90\x30\xb5\x31\xfe\x88\x31\xb5\xf0\x87\x0f\x66\x8c\x7d\xb1\xee\xff\x09\x00\x00\xff\xff\x9f\x88\xa3\xd7\xd9\x04\x00\x00")

func assetsLogoSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsLogoSvg,
		"assets/logo.svg",
	)
}

func assetsLogoSvg() (*asset, error) {
	bytes, err := assetsLogoSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/logo.svg", size: 1241, mode: os.FileMode(420), modTime: time.Unix(1475565777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/logo.svg": assetsLogoSvg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"logo.svg": &bintree{assetsLogoSvg, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
